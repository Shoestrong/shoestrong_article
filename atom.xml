<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shoestrong&#39;s blog</title>
  <subtitle>小闯的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-16T06:27:30.136Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shoestrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sublime 编辑器配置和构建检查</title>
    <link href="http://yoursite.com//template/20160912/sublime-set/"/>
    <id>http://yoursite.com//template/20160912/sublime-set/</id>
    <published>2016-09-12T08:50:00.000Z</published>
    <updated>2016-11-16T06:27:30.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sublime安装配置"><a href="#sublime安装配置" class="headerlink" title="sublime安装配置"></a>sublime安装配置</h2><h3 id="安装node包"><a href="#安装node包" class="headerlink" title="安装node包"></a>安装node包</h3><ul>
<li>jscs <code>npm install jscs -g</code></li>
<li>jshint <code>npm install jshint -g</code></li>
<li>csscomb <code>npm install csscomb -g</code></li>
<li>csslint <code>npm install csslint -g</code></li>
</ul>
<h3 id="安装gem包"><a href="#安装gem包" class="headerlink" title="安装gem包"></a>安装gem包</h3><ul>
<li>scss-lint <code>gem install scss_lint</code></li>
</ul>
<h3 id="安装sublime3-Package-Control"><a href="#安装sublime3-Package-Control" class="headerlink" title="安装sublime3 Package Control"></a>安装sublime3 <a href="https://packagecontrol.io/installation#st3" target="_blank" rel="external">Package Control</a></h3><ul>
<li>按下 `ctrl+``</li>
<li>复制粘贴以下代码 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`import urllib.request,os,hashlib; h = &apos;eb2297e1a458f27d836c04bb0cbaf282&apos; + &apos;d0e7a3098092775ccb37ca9d6b2e4b7d&apos;; </div><div class="line">    pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest();print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)`</div></pre></td></tr></table></figure>
<h3 id="安装sublime3插件"><a href="#安装sublime3插件" class="headerlink" title="安装sublime3插件"></a>安装sublime3插件</h3><ul>
<li>按下 <code>ctrl+shift+p</code>，输入’ip’（Install Package）</li>
<li><p>输入以下插件的名字，按顺序逐个进行安装：</p>
<ul>
<li><code>EditorConfig</code></li>
<li><code>Sass</code></li>
<li><code>SublimeLinter</code></li>
<li><code>SublimeLinter-jscs</code></li>
<li><code>SublimeLinter-jshint</code></li>
<li><code>SublimeLinter-csslint</code></li>
<li><code>SublimeLinter-contrib-scss-lint</code></li>
<li><code>JSFormat</code></li>
<li><code>CSScomb</code></li>
</ul>
</li>
</ul>
<h3 id="插件的配置文件"><a href="#插件的配置文件" class="headerlink" title="插件的配置文件"></a>插件的配置文件</h3><p>将以下配置文件分别下载后放入项目根目录下：</p>
<ul>
<li><code>EditorConfig</code><a href="http://alloyteam.github.io/CodeGuide/.editorconfig" target="_blank" rel="external">配置文件</a></li>
<li><code>JSCS</code><a href="http://alloyteam.github.io/CodeGuide/.jscsrc" target="_blank" rel="external">配置文件</a></li>
<li><code>JSHint</code><a href="http://alloyteam.github.io/CodeGuide/.jshintrc" target="_blank" rel="external">配置文件</a></li>
</ul>
<p>注意：全局变量需要手动加到配置文件的globals属性里，例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;globals&quot;: &#123;</div><div class="line">        &quot;ImageHandle&quot;: true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>CSSLint</code><a href="http://alloyteam.github.io/CodeGuide/.csslintrc" target="_blank" rel="external">配置文件</a></li>
<li><code>SCSS-Lint</code><a href="http://alloyteam.github.io/CodeGuide/.scss-lint.yml" target="_blank" rel="external">配置文件</a></li>
</ul>
<h3 id="编辑器及插件设置"><a href="#编辑器及插件设置" class="headerlink" title="编辑器及插件设置"></a>编辑器及插件设置</h3><ul>
<li><code>sublime3</code> 自身</li>
</ul>
<p>Preferences-&gt;Setting-User，增加下面两个配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;translate_tabs_to_spaces&quot;: true,</div><div class="line">    &quot;word_wrap&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击右下角的Spaces-&gt;Convert Indentation to Spaces可以将文件中的所有tab转换成空格</p>
<ul>
<li><p><code>JSFormat</code></p>
<p>Preferences-&gt;Package Settings-&gt;JSFormat-&gt;Setting-User，下载<a href="http://alloyteam.github.io/CodeGuide/jsformat_setting_user.json" target="_blank" rel="external">配置文件</a>覆盖</p>
<p>配置好后格式化的默认快捷键是 <code>ctrl+alt+f</code></p>
</li>
<li><p><code>SublimeLinter</code></p>
<p>右键-&gt;SublimeLinter-&gt;Lint Mode，有4种检查模式，建议选择 <code>Load/save</code></p>
<p>右键-&gt;SublimeLinter-&gt;Mark Style，建议选择 <code>Outline</code></p>
<p>右键-&gt;SublimeLinter-&gt;Choose Gutter Theme，建议选择 <code>Blueberry-round</code></p>
<p>右键-&gt;SublimeLinter-&gt;Open User Settings，将linter里面jscs的args改成 <code>[&quot;--verbose&quot;]</code>，将linter里面csslint的ignore改成 <code>&quot;box-model,adjoining-classes,box-sizing,compatible-vendor-prefixes,gradients,text-indent,fallback-colors,star-property-hack,underscore-property-hack,bulletproof-font-face,font-faces,import,regex-selectors,universal-selector,unqualified-attributes,overqualified-elements,duplicate-background-images,floats,font-sizes,ids,important,outline-none,qualified-headings,unique-headings&quot;</code></p>
<p>当光标处于有错误的代码行时，详细的错误信息会显示在下面的状态栏中</p>
<p>右键-&gt;SublimeLinter可以看到所有的快捷键，其中 <code>ctrl+k, a</code> 可以列出所有错误</p>
</li>
<li><p><code>CSScomb</code></p>
<p>Preferences-&gt;Package Settings-&gt;CSScomb-&gt;Setting-User，下载<a href="http://alloyteam.github.io/CodeGuide/csscomb_setting_user.json" target="_blank" rel="external">配置文件</a>覆盖</p>
<p>配置好后格式化的默认快捷键是 <code>ctrl+shift+c</code></p>
</li>
</ul>
<h2 id="grunt插件"><a href="#grunt插件" class="headerlink" title="grunt插件"></a>grunt插件</h2><h3 id="在项目中安装grunt插件"><a href="#在项目中安装grunt插件" class="headerlink" title="在项目中安装grunt插件"></a>在项目中安装grunt插件</h3><p><em>jscs <code>npm install grunt-jscs --save-dev</code>
</em>jshint <code>npm install grunt-contrib-jshint --save-dev</code><br><em>csslint <code>npm install grunt-contrib-csslint --save-dev</code>
</em>scss-lint <code>npm install grunt-scss-lint --save-dev</code></p>
<h3 id="插件的配置文件-1"><a href="#插件的配置文件-1" class="headerlink" title="插件的配置文件"></a>插件的配置文件</h3><ul>
<li><code>JSCS</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        config: true,</div><div class="line">        verbose: true</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>JSHint</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        jshintrc: true</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>CSSLint</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        csslintrc: &apos;.csslintrc&apos;</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>SCSS-Lint</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        config: &apos;.scss-lint.yml&apos;</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sublime安装配置&quot;&gt;&lt;a href=&quot;#sublime安装配置&quot; class=&quot;headerlink&quot; title=&quot;sublime安装配置&quot;&gt;&lt;/a&gt;sublime安装配置&lt;/h2&gt;&lt;h3 id=&quot;安装node包&quot;&gt;&lt;a href=&quot;#安装node包&quot; c
    
    </summary>
    
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>必备的7个JavaScript函数</title>
    <link href="http://yoursite.com//template/20160722/js-function/"/>
    <id>http://yoursite.com//template/20160722/js-function/</id>
    <published>2016-07-21T16:00:00.000Z</published>
    <updated>2016-11-16T06:27:21.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="防止高频调用的debounce函数"><a href="#防止高频调用的debounce函数" class="headerlink" title="防止高频调用的debounce函数"></a>防止高频调用的debounce函数</h3><p>debounce 函数对于那些执行事件驱动的任务来说是必不可少的提高性能的函数。如果你在使用scroll, resize, key*等事件触发执行任务时不使用降频函数，也行你就犯了重大的错误。下面这个降频函数 debounce 能让你的代码变的高效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function debounce(func, wait, immediate) &#123;</div><div class="line">    var timeout;</div><div class="line">    return function() &#123;</div><div class="line">        var context = this, args = arguments;</div><div class="line">        var later = function() &#123;</div><div class="line">            timeout = null;</div><div class="line">            if (!immediate) func.apply(context, args);</div><div class="line">        &#125;;</div><div class="line">        var callNow = immediate &amp;&amp; !timeout;</div><div class="line">        clearTimeout(timeout);</div><div class="line">        timeout = setTimeout(later, wait);</div><div class="line">        if (callNow) func.apply(context, args);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var myEfficientFn = debounce(function() &#123;</div><div class="line">    // All the taxing stuff you do</div><div class="line">&#125;, 250);</div><div class="line">window.addEventListener(&apos;resize&apos;, myEfficientFn);</div></pre></td></tr></table></figure>
<p>这个 debounce 函数在给定的时间间隔内只允许你提供的回调函数执行一次，以此降低它的执行频率。当遇到高频触发的事件时，这样的限制显得尤为重要。</p>
<h3 id="设定时间-频率循环检测函数"><a href="#设定时间-频率循环检测函数" class="headerlink" title="设定时间/频率循环检测函数"></a>设定时间/频率循环检测函数</h3><p>上面提到的 debounce 函数是借助于某个事件的触发。但有时候并没有这样的事件可用，那我们只能自己写一个函数来每隔一段时间检查一次。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function poll (fn, callback, err, timeout, interval) &#123;</div><div class="line">    var startTime = (new Date()).getTime();</div><div class="line">    var pi = window.setInterval(function()&#123;</div><div class="line">        if (Math.floor(((new Date).getTime() - startTime) / 1000) &lt;= timeout) &#123;</div><div class="line">            if (fn()) &#123;</div><div class="line">                callback();</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            window.clearInterval(pi);</div><div class="line">            err();</div><div class="line">        &#125;</div><div class="line">    &#125;, interval)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="禁止重复调用、只允许执行一次的once-函数"><a href="#禁止重复调用、只允许执行一次的once-函数" class="headerlink" title="禁止重复调用、只允许执行一次的once 函数"></a>禁止重复调用、只允许执行一次的once 函数</h3><p>很多时候，我们只希望某种动作只能执行一次，就像是我们使用 onload 来限定只在加载完成时执行一次。下面这个函数就能让你的操作执行一次后就不会再重复执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function once(fn, context) &#123; </div><div class="line">    var result;</div><div class="line"></div><div class="line">    return function() &#123; </div><div class="line">        if(fn) &#123;</div><div class="line">            result = fn.apply(context || this, arguments);</div><div class="line">            fn = null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return result;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Usage</div><div class="line">var canOnlyFireOnce = once(function() &#123;</div><div class="line">    console.log(&apos;Fired!&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">canOnlyFireOnce(); // &quot;Fired!&quot;</div><div class="line">canOnlyFireOnce(); // nada</div></pre></td></tr></table></figure>
<h3 id="获取一个链接的绝对地址-getAbsoluteUrl"><a href="#获取一个链接的绝对地址-getAbsoluteUrl" class="headerlink" title="获取一个链接的绝对地址 getAbsoluteUrl"></a>获取一个链接的绝对地址 getAbsoluteUrl</h3><p>获取链接的绝对地址并不像你想象的那么简单。下面就是一个非常实用的函数，能根据你输入的相对地址，获取绝对地址：<br>var getAbsoluteUrl = (function() {<br>    var a;</p>
<pre><code>return function(url) {
    if(!a) a = document.createElement(&apos;a&apos;);
    a.href = url;

    return a.href;
};
</code></pre><p>})();</p>
<p>// Usage<br>getAbsoluteUrl(‘/something’); // <a href="http://www.webhek.com/something" target="_blank" rel="external">http://www.webhek.com/something</a></p>
<h3 id="判断一个JavaScript函数是否是系统原生函数-isNative"><a href="#判断一个JavaScript函数是否是系统原生函数-isNative" class="headerlink" title="判断一个JavaScript函数是否是系统原生函数 isNative"></a>判断一个JavaScript函数是否是系统原生函数 isNative</h3><p>很多第三方js脚本都会在全局变量里引入新的函数，有些甚至会覆盖掉系统的原生函数，下面这个方法就是来检查是不是原生函数的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">;(function() &#123;</div><div class="line">  var toString = Object.prototype.toString;</div><div class="line">  var fnToString = Function.prototype.toString;</div><div class="line">  var reHostCtor = /^\[object .+?Constructor\]$/;</div><div class="line">  var reNative = RegExp(&apos;^&apos; +</div><div class="line">    String(toString)</div><div class="line">    .replace(/[.*+?^$&#123;&#125;()|[\]\/\\]/g, &apos;\\$&amp;&apos;)</div><div class="line">    .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, &apos;$1.*?&apos;) + &apos;$&apos;</div><div class="line">  );</div><div class="line">  </div><div class="line">  function isNative(value) &#123;</div><div class="line">    var type = typeof value;</div><div class="line">    return type == &apos;function&apos;</div><div class="line">      ? reNative.test(fnToString.call(value))</div><div class="line">      : (value &amp;&amp; type == &apos;object&apos; &amp;&amp; reHostCtor.test(toString.call(value))) || false;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  module.exports = isNative;</div><div class="line">&#125;());</div><div class="line"></div><div class="line">// Usage</div><div class="line">isNative(alert); // true</div><div class="line">isNative(myCustomFunction); // false</div></pre></td></tr></table></figure>
<h3 id="用JavaScript创建新的CSS规则-insertRule"><a href="#用JavaScript创建新的CSS规则-insertRule" class="headerlink" title="用JavaScript创建新的CSS规则 insertRule"></a>用JavaScript创建新的CSS规则 insertRule</h3><p>有时候我们会使用一个CSS选择器(比如 document.querySelectorAll)来获取一个 NodeList ，然后给它们每个依次修改样式。其实这并不是一种高效的做法，高效的做法是用JavaScript新建一段CSS样式规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Sheet = (function() &#123;</div><div class="line">    var style = document.createElement(&apos;style&apos;);</div><div class="line">    style.setAttribute(&apos;media&apos;, &apos;screen&apos;);</div><div class="line">    style.appendChild(document.createTextNode(&apos;&apos;));</div><div class="line">    document.head.appendChild(style);</div><div class="line">    return function(rule)&#123; style.sheet.insertRule( rule, style.sheet.cssRules.length ); &#125; ;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">Sheet(&quot;.stats &#123; position: relative ; top: 0px &#125;&quot;) ;</div></pre></td></tr></table></figure>
<p>这些做法的效率非常高，在一些场景中，比如使用ajax新加载一段html时，使用上面这个方法，你不需要操作新加载的html内容。</p>
<h3 id="判断网页元素是否具有某种属性和样式-matchesSelector"><a href="#判断网页元素是否具有某种属性和样式-matchesSelector" class="headerlink" title="判断网页元素是否具有某种属性和样式 matchesSelector"></a>判断网页元素是否具有某种属性和样式 matchesSelector</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function matchesSelector(el, selector) &#123;</div><div class="line">    var p = Element.prototype;</div><div class="line">    var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) &#123;</div><div class="line">        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;</div><div class="line">    &#125;;</div><div class="line">    return f.call(el, selector);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Usage</div><div class="line">matchesSelector(document.getElementById(&apos;myDiv&apos;), &apos;div.someSelector[some-attribute=true]&apos;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;防止高频调用的debounce函数&quot;&gt;&lt;a href=&quot;#防止高频调用的debounce函数&quot; class=&quot;headerlink&quot; title=&quot;防止高频调用的debounce函数&quot;&gt;&lt;/a&gt;防止高频调用的debounce函数&lt;/h3&gt;&lt;p&gt;debounce 函
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>搞定git分支</title>
    <link href="http://yoursite.com//template/20160510/git-master/"/>
    <id>http://yoursite.com//template/20160510/git-master/</id>
    <published>2016-05-09T16:00:00.000Z</published>
    <updated>2016-11-16T07:17:44.928Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>查看远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git branch -a </div><div class="line">* br-2.1.2.2  </div><div class="line">master  </div><div class="line">remotes/origin/HEAD -&gt; origin/master  </div><div class="line">remotes/origin/br-2.1.2.1  </div><div class="line">remotes/origin/br-2.1.2.2  </div><div class="line">remotes/origin/br-2.1.3  </div><div class="line">remotes/origin/master</div></pre></td></tr></table></figure>
</li>
<li><p>查看本地分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch -a  </div><div class="line">* br-2.1.2.2  </div><div class="line">master</div></pre></td></tr></table></figure>
</li>
<li><p>创建分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git branch test </div><div class="line">$ git branch  </div><div class="line">* br-2.1.2.2  </div><div class="line">master  </div><div class="line">test</div></pre></td></tr></table></figure>
<p>把分支推到远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin test</div></pre></td></tr></table></figure>
</li>
<li><p>切换分支到test</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git branch  </div><div class="line">* br-2.1.2.2  </div><div class="line">master  </div><div class="line">test  </div><div class="line"></div><div class="line">$ git checkout test  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/service/cmd/GetCustomerTarCmd.java  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/util/ServerUtil.java  </div><div class="line">Switched to branch &apos;test&apos;  </div><div class="line"></div><div class="line">$ git branch  </div><div class="line">br-2.1.2.2  </div><div class="line">master  </div><div class="line">* test</div></pre></td></tr></table></figure>
<p>M 表示cong 原来分支（上一次修改没有提交br-2.1.2.2）带过来的修改</p>
</li>
<li><p>删除本地分支 git branch -d xxxxx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ git checkout br-2.1.2.2  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/service/cmd/GetCustomerTarCmd.java  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/util/ServerUtil.java  </div><div class="line">Switched to branch &apos;br-2.1.2.2&apos;  </div><div class="line"></div><div class="line">$ git br  </div><div class="line">* br-2.1.2.2  </div><div class="line"> master  </div><div class="line"> test  </div><div class="line"></div><div class="line">$ git br -d test  </div><div class="line">Deleted branch test (was 17d28d9).  </div><div class="line"></div><div class="line">$ git br  </div><div class="line">* br-2.1.2.2  </div><div class="line"> master</div></pre></td></tr></table></figure>
</li>
<li><p>查看本地和远程分支 -a。前面带*号的代表你当前工作目录所处的分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remotes/origin/HEAD -&gt; origin/master #啥意思呢？</div></pre></td></tr></table></figure>
<p>”在clone完成之后，Git 会自动为你将此远程仓库命名为origin（origin只相当于一个别名，运行git remote –v或者查看.git\/config可以看到origin的含义），并下载其中所有的数据，建立一个指向它的master 分支的指针，我们用(远程仓库名)\/(分支名) 这样的形式表示远程分支，所以origin\/master指向的是一个remote branch（从那个branch我们clone数据到本地）“<br>这个是执行 git remote -v 的结果，看出来origin其实就是远程的git地址的一个别名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote  -v  </div><div class="line">origin  git@xxxx/Shoestrong.git (fetch)  </div><div class="line">origin  git@xxxx/Shoestrong.git (push)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git branch -a  </div><div class="line">br-2.1.2.2  </div><div class="line">master  </div><div class="line">* test  </div><div class="line">remotes/origin/HEAD -&gt; origin/master  </div><div class="line">remotes/origin/br-2.1.2.1  </div><div class="line">remotes/origin/br-2.1.2.2  </div><div class="line">remotes/origin/br-2.1.3  </div><div class="line">remotes/origin/master</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :br-1.0.0</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -r -d origin/branch-name  </div><div class="line">git push origin :branch-name</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看远程分支&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>node.js建立个简单的web服务器</title>
    <link href="http://yoursite.com//template/20160415/node-webserver/"/>
    <id>http://yoursite.com//template/20160415/node-webserver/</id>
    <published>2016-04-14T16:00:00.000Z</published>
    <updated>2016-11-16T07:17:46.397Z</updated>
    
    <content type="html"><![CDATA[<p>接触nodejs还不算太多，欠缺的知识方面很多。</p>
<p>就来试着搭建一下，废话少说直接上代码：</p>
<p>cmd:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ./myServer  &lt;自己的文件目录&gt;</div><div class="line"></div><div class="line">node server.js  &lt;直接node下运行server.js&gt;</div></pre></td></tr></table></figure>
<p>server.js:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是一个简单的Node HTTP服务器,能处理当前目录的文件</span></div><div class="line"><span class="comment">// 并能实现两种特殊的URL用于测试</span></div><div class="line"><span class="comment">// 用HTTP://localhost:4000或http://127.0.0.1:4000连接这个服务器</span></div><div class="line"></div><div class="line"><span class="comment">// 首先加载所有需要用到的模块</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);        <span class="comment">// Http服务器API</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);            <span class="comment">// 用于处理本地文件</span></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> http.Server();    <span class="comment">// 创建新的HTTP服务器</span></div><div class="line">server.listen(<span class="number">4000</span>);            <span class="comment">// 监听端口4000</span></div><div class="line"></div><div class="line"><span class="comment">// 使用on方法注册时间处理</span></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123; <span class="comment">// 当有request请求的时候触发处理函数</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Request'</span>);</div><div class="line">    <span class="comment">// 解析请求的URL</span></div><div class="line">    <span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>).parse(request.url);</div><div class="line">    <span class="comment">// 特殊URL会让服务器在发送响应前先等待</span></div><div class="line">    <span class="keyword">switch</span>(url.pathname) &#123;    </div><div class="line">    <span class="keyword">case</span> <span class="string">''</span>||<span class="string">'/'</span> : <span class="comment">// 模拟欢迎页,nodejs是高效流处理的方案,也可以通过配置文件来配置</span></div><div class="line">        fs.readFile(<span class="string">'./index.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, content</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(err) &#123;</div><div class="line">                response.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset="UTF-8"'</span> &#125;);</div><div class="line">                response.write(err.message);</div><div class="line">                response.end();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span> : <span class="string">'text/html; charset=UTF-8'</span> &#125;);</div><div class="line">                response.write(content);</div><div class="line">                response.end();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/test/delay'</span>:<span class="comment">// 此处用于模拟缓慢的网络连接</span></div><div class="line">        <span class="comment">// 使用查询字符串来获取延迟时长,或者2000毫秒</span></div><div class="line">        <span class="keyword">var</span> delay = <span class="built_in">parseInt</span>(url.query) || <span class="number">2000</span>;</div><div class="line">        <span class="comment">// 设置响应状态和头</span></div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain; charset=UTF-8'</span>&#125;);</div><div class="line">        <span class="comment">// 立即开始编写响应主体</span></div><div class="line">        response.write(<span class="string">'Sleeping for'</span> + delay + <span class="string">' milliseconds...'</span>);</div><div class="line">        <span class="comment">// 在之后调用的另一个函数中完成响应</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            response.write(<span class="string">'done.'</span>);</div><div class="line">            response.end();</div><div class="line">        &#125;, delay);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/test/mirror'</span>:<span class="comment">// 如果请求是test/mirror,则原文返回它</span></div><div class="line">        <span class="comment">// 响应状态和头</span></div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain; charset=UTF-8'</span>&#125;);</div><div class="line">        <span class="comment">// 用请求的内容开始编写响应主体</span></div><div class="line">        response.write(request.mothod + <span class="string">' '</span> + request.url + <span class="string">' HTTP/'</span> + request.httpVersion + <span class="string">'\r\n'</span>);</div><div class="line">        <span class="comment">// 所有的请求头</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> h <span class="keyword">in</span> request.headers) &#123;</div><div class="line">            response.write(h + <span class="string">':'</span> + request.headers[h] + <span class="string">'\r\n'</span>);</div><div class="line">        &#125;</div><div class="line">        response.write(<span class="string">'\r\n'</span>);<span class="comment">// 使用额外的空白行来结束头</span></div><div class="line">        <span class="comment">// 在这些事件处理程序函数中完成响应</span></div><div class="line">        <span class="comment">// 当请求主体的数据块完成时,把其写入响应中</span></div><div class="line">        request.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123; response.write(chunk); &#125;);</div><div class="line">        <span class="comment">// 当请求结束时,响应也完成</span></div><div class="line">        request.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123; response.end(); &#125;);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/json'</span> : <span class="comment">// 模拟JSON数据返回</span></div><div class="line">        <span class="comment">// 响应状态和头</span></div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span>:<span class="string">'application/json; charset=UTF-8'</span>&#125;);</div><div class="line">        response.write(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">test</span>:<span class="string">'success'</span>&#125;));</div><div class="line">        response.end();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:<span class="comment">// 处理来自本地目录的文件</span></div><div class="line">        <span class="keyword">var</span> filename = url.pathname.substring(<span class="number">1</span>);    <span class="comment">// 去掉前导'/'</span></div><div class="line">        <span class="keyword">var</span> type = getType(filename.substring(filename.lastIndexOf(<span class="string">'.'</span>)+<span class="number">1</span>));</div><div class="line">        <span class="comment">// 异步读取文件,并将内容作为单独的数据模块传给回调函数</span></div><div class="line">        <span class="comment">// 对于确实很大的文件,使用流API fs.createReadStream()更好</span></div><div class="line">        fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, content</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(err) &#123;</div><div class="line">                response.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset="UTF-8"'</span> &#125;);</div><div class="line">                response.write(err.message);</div><div class="line">                response.end();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span> : type &#125;);</div><div class="line">                response.write(content);</div><div class="line">                response.end();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125; </div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">endTag</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> type=<span class="literal">null</span>;</div><div class="line">    <span class="keyword">switch</span>(endTag)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'html'</span> :</div><div class="line">    <span class="keyword">case</span> <span class="string">'htm'</span> :</div><div class="line">        type = <span class="string">'text/html; charset=UTF-8'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'js'</span> : </div><div class="line">        type = <span class="string">'application/javascript; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'css'</span> :</div><div class="line">        type = <span class="string">'text/css; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'txt'</span> :</div><div class="line">        type = <span class="string">'text/plain; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'manifest'</span> :</div><div class="line">        type = <span class="string">'text/cache-manifest; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span> :</div><div class="line">        type = <span class="string">'application/octet-stream'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"><span class="comment">//向控制台输出服务启动的信息 </span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'[WebServer][Start] running at http://localhost:4000'</span>);</div></pre></td></tr></table></figure>
<p>在localhost:4000预览就OK了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触nodejs还不算太多，欠缺的知识方面很多。&lt;/p&gt;
&lt;p&gt;就来试着搭建一下，废话少说直接上代码：&lt;/p&gt;
&lt;p&gt;cmd:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>jQuery.extend扩展</title>
    <link href="http://yoursite.com//template/20160402/jquery-extend/"/>
    <id>http://yoursite.com//template/20160402/jquery-extend/</id>
    <published>2016-04-01T16:00:00.000Z</published>
    <updated>2016-11-16T06:16:09.828Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery.extend 对jQuery本身的属性和方法进行了扩展、（相当于添加静态方法），也可以扩展对象，是否实行深度拷贝(第一个参数决定).<br>jQuery.fn.extend 对jQuery.fn的属性和方法进行了扩展<br>（相当于添加成员方法）</p>
<p>源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.extend = function() &#123;</div><div class="line">    var src, copyIsArray, copy, name, options, clone,</div><div class="line">        target = arguments[0] || &#123;&#125;,    // 常见用法 jQuery.extend( obj1, obj2 )，此时，target为arguments[0]</div><div class="line">        i = 1,</div><div class="line">        length = arguments.length,</div><div class="line">        deep = false;</div><div class="line"></div><div class="line">    // Handle a deep copy situation</div><div class="line">    if ( typeof target === &quot;boolean&quot; ) &#123;    // 如果第一个参数为true，即 jQuery.extend( true, obj1, obj2 ); 的情况</div><div class="line">        deep = target;  // 此时target是true</div><div class="line">        target = arguments[1] || &#123;&#125;;    // target改为 obj1</div><div class="line">        // skip the boolean and the target</div><div class="line">        i = 2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Handle case when target is a string or something (possible in deep copy)</div><div class="line">    if ( typeof target !== &quot;object&quot; &amp;&amp; !jQuery.isFunction(target) ) &#123;  // 处理奇怪的情况，比如 jQuery.extend( &apos;hello&apos; , &#123;nick: &apos;casper&#125;)~~</div><div class="line">        target = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // extend jQuery itself if only one argument is passed</div><div class="line">    if ( length === i ) &#123;   // 处理这种情况 jQuery.extend(obj)，或 jQuery.fn.extend( obj )</div><div class="line">        target = this;  // jQuery.extend时，this指的是jQuery；jQuery.fn.extend时，this指的是jQuery.fn</div><div class="line">        --i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for ( ; i &lt; length; i++ ) &#123;</div><div class="line">        // Only deal with non-null/undefined values</div><div class="line">        if ( (options = arguments[ i ]) != null ) &#123; // 比如 jQuery.extend( obj1, obj2, obj3, ojb4 )，options则为 obj2、obj3...</div><div class="line">            // Extend the base object</div><div class="line">            for ( name in options ) &#123;</div><div class="line">                src = target[ name ];</div><div class="line">                copy = options[ name ];</div><div class="line"></div><div class="line">                // Prevent never-ending loop</div><div class="line">                if ( target === copy ) &#123;    // 防止自引用，不赘述</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // Recurse if we&apos;re merging plain objects or arrays</div><div class="line">                // 如果是深拷贝，且被拷贝的属性值本身是个对象</div><div class="line">                if ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) &#123;</div><div class="line">                    if ( copyIsArray ) &#123;    // 被拷贝的属性值是个数组</div><div class="line">                        copyIsArray = false;</div><div class="line">                        clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</div><div class="line"></div><div class="line">                    &#125; else &#123;    被拷贝的属性值是个plainObject，比如&#123; nick: &apos;casper&apos; &#125;</div><div class="line">                        clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    // Never move original objects, clone them</div><div class="line">                    target[ name ] = jQuery.extend( deep, clone, copy );  // 递归~</div><div class="line"></div><div class="line">                // Don&apos;t bring in undefined values</div><div class="line">                &#125; else if ( copy !== undefined ) &#123;  // 浅拷贝，且属性值不为undefined</div><div class="line">                    target[ name ] = copy;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Return the modified object</div><div class="line">    return target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery.extend 对jQuery本身的属性和方法进行了扩展、（相当于添加静态方法），也可以扩展对象，是否实行深度拷贝(第一个参数决定).&lt;br&gt;jQuery.fn.extend 对jQuery.fn的属性和方法进行了扩展&lt;br&gt;（相当于添加成员方法）&lt;/p&gt;
&lt;p
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>创建对象的方法与实践</title>
    <link href="http://yoursite.com//template/20160210/create-object/"/>
    <id>http://yoursite.com//template/20160210/create-object/</id>
    <published>2016-02-09T16:00:00.000Z</published>
    <updated>2016-11-16T06:33:19.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建自变量"><a href="#创建自变量" class="headerlink" title="创建自变量"></a>创建自变量</h3><p>创建对象最简单的方法，对象字面量。JavaScript总是宣扬自己能够“无中生有”地创建对象——不需要类、不需要模板、不需要原型——“噌”地一下，一个有方法有数据的对象就出现了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">  x: 42,</div><div class="line">  y: 3.14,</div><div class="line">  f: function() &#123;&#125;,</div><div class="line">  g: function() &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>缺点：如果我们想在其他地方创建一个同类型的对象，就得把这个对象的方法、数据和初始化都复制粘贴过去。我们需要一种能够批量创建同类型对象的方法，而不是只创建一个对象。</p>
<h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>这种方法来创建一类具有相同结构、接口和实现的对象是最简单的。我们不直接创建一个对象字面量，而是将对象字面量作为函数的返回值，当我们需要多次或多处创建同类型的对象时，只要调用这个函数就行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function thing() &#123;</div><div class="line">  return &#123;</div><div class="line">    x: 42,</div><div class="line">    y: 3.14,</div><div class="line">    f: function() &#123;&#125;,</div><div class="line">    g: function() &#123;&#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var o = thing();</div></pre></td></tr></table></figure>
<p>缺点：它会导致内存膨胀，因为每一个对象都包含了工厂函数的独立副本。理论上我们希望所有对象共享一个工厂函数副本。</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>JavaScript提供了一种内置的在对象之间共享数据的机制，叫做原型链。当我们访问一个对象的属性时，它会委托某些其他对象来完成这一请求。我们可以利用这一点来修改工厂函数，使它创建的每个对象只包含自己特有的数据，而对其他属性的请求则全部委托给原型链上共有的一个对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var thingPrototype = &#123;</div><div class="line">  f: function() &#123;&#125;,</div><div class="line">  g: function() &#123;&#125;</div><div class="line">&#125;;</div><div class="line">function thing() &#123;</div><div class="line">  var o = Object.create(thingPrototype);</div><div class="line">  o.x = 42;</div><div class="line">  o.y = 3.14;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var o = thing();</div></pre></td></tr></table></figure>
<p>事实上，JavaScript本身就有内置的机制来支持这种通用模式。我们不需要自己创建这个共有的对象（即原型对象），JavaScript会自动为每个函数创建一个原型对象，我们可以把共享数据直接放在这个对象里。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">thing.prototype.f = function() &#123;&#125;;</div><div class="line">thing.prototype.g = function() &#123;&#125;;</div><div class="line">function thing() &#123;</div><div class="line">  var o = Object.create(thing.prototype);</div><div class="line">  o.x = 42;</div><div class="line">  o.y = 3.14;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var o = thing();</div></pre></td></tr></table></figure>
<p>缺点：会导致重复。上述thing函数的第一行和最后一行在每一个“委托原型的工厂函数”中都会重复一次，几乎没有区别。</p>
<h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><p>我们可以把那些重复的代码抽出来，放进一个自定义函数里。这个函数会创建一个对象，并与其他某个任意函数（参数函数）的原型建立委托(继承)关系，然后我们把新创建的对象作为参数，调用这个函数（参数函数），最后返回这个新的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function create(fn) &#123;</div><div class="line">  var o = Object.create(fn.prototype);</div><div class="line">  fn.call(o);</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">Thing.prototype.f = function() &#123;&#125;;</div><div class="line">Thing.prototype.g = function() &#123;&#125;;</div><div class="line">function Thing() &#123;</div><div class="line">  this.x = 42;</div><div class="line">  this.y = 3.14;</div><div class="line">&#125;</div><div class="line">var o = create(Thing);</div></pre></td></tr></table></figure>
<p>事实上，JavaScript对这种方法也有内置的支持机制。我们定义的这个create函数实际上就是new关键字的一个基本实现，因此我们可以顺手把create换成new。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Thing.prototype.f = function() &#123;&#125;;</div><div class="line">Thing.prototype.g = function() &#123;&#125;;</div><div class="line">function Thing() &#123;</div><div class="line">  this.x = 42;</div><div class="line">  this.y = 3.14;</div><div class="line">&#125;</div><div class="line">var o = new Thing();</div></pre></td></tr></table></figure>
<p>我们现在抵达的这一站通常被称为ES5类。它通过函数来创建对象，把需要共享的数据委托给原型对象，并使用new关键字来处理重复的逻辑。<br>缺点：冗长又难看，而且在实现继承的时候会更冗长更难看。</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>JavaScript最新的相关改进是ES6 类，用新语法来实现上述功能要简洁得多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Thing &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.x = 42;</div><div class="line">    this.y = 3.14;</div><div class="line">  &#125;</div><div class="line">  f() &#123;&#125;</div><div class="line">  g() &#123;&#125;</div><div class="line">&#125;</div><div class="line">var o = new Thing();</div></pre></td></tr></table></figure>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>多年以来，JavaScript开发者们与原型链的关系总是若即若离，纠缠不清。而今天我们最有可能遇到的两种创建对象的方式，一种是强烈依赖原型链的class语法，另一种则是完全不依赖原型链的工厂函数语法。这两种方式在性能上和特点上是不一样的——尽管差别不太大。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>今天的JavaScript引擎已经经过了大幅度的优化，以至于很难通过JavaScript代码来推断怎样会比较快。关键在于测量方法。然而测量方法有时也会失灵。通常每六周就会有更新的JavaScript引擎发布，而在这之前采取的测量方法，和基于这种测量方法做出的决策都有可能失去意义。因此，我的经验法则是选择最官方、最广泛使用的语法，因为大多数时候它经历的实践检验最多，因而性能是最高的。目前来说class语法最符合这一点，在我写这篇文章时，class语法大约比返回字面量的工厂函数快3倍。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>随着ES6的发布，类与工厂函数之间曾经存在的几点差异消失了。现在，工厂函数和类都能够强制实现真正的私有数据——工厂函数通过闭包实现，类通过WeakMap实现。两者都能实现多重继承——工厂函数可以将其他属性混入自己的对象，类也可以将其他属性混入自己的原型，或者通过类工厂，通过代理也能实现。工厂函数和类也都可以在需要的时候返回任意对象，语法也都很简单。<br>结论<br>综合考虑，我更倾向于class语法。它标准、简单、干净、快速，还提供了所有曾经只有函数工厂才具备的特点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建自变量&quot;&gt;&lt;a href=&quot;#创建自变量&quot; class=&quot;headerlink&quot; title=&quot;创建自变量&quot;&gt;&lt;/a&gt;创建自变量&lt;/h3&gt;&lt;p&gt;创建对象最简单的方法，对象字面量。JavaScript总是宣扬自己能够“无中生有”地创建对象——不需要类、不需要模板
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>检测IE浏览器版本</title>
    <link href="http://yoursite.com//template/20160128/IE-solve/"/>
    <id>http://yoursite.com//template/20160128/IE-solve/</id>
    <published>2016-01-27T16:00:00.000Z</published>
    <updated>2016-11-16T07:34:42.373Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，我们是建议使用条件注释来替换浏览器检测的方法。本文所讲的技术仅仅在条件注释无法实现，或者需要检测一个bug。</p>
<p>IE条件注释：</p>
<blockquote>
<!--[if lt IE 7 ]> <html class="ie6"> <![endif]-->
<!--[if IE 7 ]>    <html class="ie7"> <![endif]-->
<!--[if IE 8 ]>    <html class="ie8"> <![endif]-->
<!--[if IE 9 ]>    <html class="ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--> <html class=""> <!--<![endif]-->
</html></blockquote>
<p>IE10及其以下的浏览器可以通过检测存在非标准的 document.all 对象来区分。</p>
<p>除了上面的特性外，每个IE浏览器还有各自的支持对象</p>
<table>
<thead>
<tr>
<th>IE版本</th>
<th style="text-align:center">支持的标准对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>10+</td>
<td style="text-align:center">window.atob</td>
</tr>
<tr>
<td>9+</td>
<td style="text-align:center">document.addEventListener</td>
</tr>
<tr>
<td>8+</td>
<td style="text-align:center">document.querySelector</td>
</tr>
<tr>
<td>7+</td>
<td style="text-align:center">window.XMLHttpRequest</td>
</tr>
<tr>
<td>6+</td>
<td style="text-align:center">document.compatMode</td>
</tr>
</tbody>
</table>
<p>通过上面列出的这些不同IE浏览器版本的检测特性，我们可以组合得到某个特定的IE版本</p>
<p>例如下面的这些组合</p>
<table>
<thead>
<tr>
<th>IE版本</th>
<th style="text-align:center">支持的状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>10及以下</td>
<td style="text-align:center">document.all</td>
</tr>
<tr>
<td>9及以下</td>
<td style="text-align:center">document.all &amp;&amp; !window.atob</td>
</tr>
<tr>
<td>8及以下</td>
<td style="text-align:center">document.all &amp;&amp; !document.addEventListener</td>
</tr>
<tr>
<td>7及以下</td>
<td style="text-align:center">document.all &amp;&amp; !document.querySelector</td>
</tr>
<tr>
<td>6及以下</td>
<td style="text-align:center">document.all &amp;&amp; !window.XMLHttpRequest</td>
</tr>
<tr>
<td>5.x</td>
<td style="text-align:center">document.all &amp;&amp; !document.compatMode</td>
</tr>
</tbody>
</table>
<p>例子</p>
<p>下面的条件代码只会在IE7及一下浏览器中运行</p>
<blockquote>
<p>if (document.all &amp;&amp; !document.querySelector) {<br>alert(‘IE7 or lower’);<br>}</p>
</blockquote>
<p>下面这一个只会运行在IE8中，并且不支持IE7或者IE9：</p>
<blockquote>
<p>if (document.all &amp;&amp; document.querySelector &amp;&amp; !document.addEventListener) {<br>alert(‘IE8’);<br>}</p>
</blockquote>
<p>下面的条件代码当浏览器为IE11+ 或者非IE时为真</p>
<blockquote>
<p>if (!document.all) {<br>alert(‘IE11+ or not IE’);<br>}</p>
</blockquote>
<p>其他方法检测IE版本</p>
<p>由于IE11并不再支持条件注释了</p>
<p>检测不同的IE版本对应不同的javascript引擎</p>
<p>|IE版本             | - | 10 | 9 | 8   | 7   | 6   |<br>|JavaScript引擎版本 | - | 10 | 9 | 5.8 | 5.7 | 5.6 |</p>
<p>条件注释<br>例如下面的代码结合条件注释和JS代码：</p>
<p>html代码：</p>
<blockquote>
<p><script><br>var ie = false;<br></script><br><!--[if lte IE 7]><script>
ie = 7;
</script><![endif]--></p>
</blockquote>
<p>在JavaScript文件中：</p>
<blockquote>
<p>if (7 === ie) {<br>alert(‘IE7 or lower’);<br>}</p>
</blockquote>
<p>或者是：</p>
<blockquote>
<p>var test = document.createElement(‘div’);<br>test.innerHTML = ‘<!--[if lte IE 7]>1<![endif]-->‘;</p>
<p>if (‘1’ === test.innerHTML) {<br>alert(‘IE7 or lower’);<br>}</p>
</blockquote>
<p>相比较使用全局方法，这种方法可能就不优雅并且速度也不是很快。</p>
<p>IE版本代码总结：</p>
<p>IE11或者非IE</p>
<blockquote>
<p>if (!document.all) {<br>alert(‘IE11+ or not IE’);<br>}</p>
</blockquote>
<p>IE10</p>
<blockquote>
<p>if (document.all &amp;&amp; document.addEventListener &amp;&amp; window.atob) {<br>alert(‘IE10’);<br>}</p>
</blockquote>
<p>IE9</p>
<blockquote>
<p>if (document.all &amp;&amp; document.addEventListener &amp;&amp; !window.atob) {<br>alert(‘IE9’);<br>}<br>IE8上面已经给出</p>
<p>if (document.all &amp;&amp; document.querySelector &amp;&amp; !document.addEventListener) {<br>alert(‘IE8’);<br>}</p>
</blockquote>
<p>IE7</p>
<blockquote>
<p>if (document.all &amp;&amp; window.XMLHttpRequest &amp;&amp; !document.querySelector) {<br>alert(‘IE7’);<br>}</p>
</blockquote>
<p>IE6</p>
<blockquote>
<p>if (document.all &amp;&amp; document.compatMode &amp;&amp; !window.XMLHttpRequest) {<br>alert(‘IE6’);<br>}</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般来说，我们是建议使用条件注释来替换浏览器检测的方法。本文所讲的技术仅仅在条件注释无法实现，或者需要检测一个bug。&lt;/p&gt;
&lt;p&gt;IE条件注释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;!--[if lt IE 7 ]&gt; &lt;html class=&quot;ie6&quot;&gt; &lt;![endi
    
    </summary>
    
    
      <category term="IE" scheme="http://yoursite.com/tags/IE/"/>
    
  </entry>
  
  <entry>
    <title>jquery 小片段</title>
    <link href="http://yoursite.com//template/20151223/jquery-bits/"/>
    <id>http://yoursite.com//template/20151223/jquery-bits/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2016-11-16T06:42:12.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检测IE浏览器"><a href="#检测IE浏览器" class="headerlink" title="检测IE浏览器"></a>检测IE浏览器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function() &#123;</div><div class="line">    if(navigator.userAgent.match(/msie/i)) &#123;</div><div class="line">        alert(&apos;I am an old fashioned Internet Explorer&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="平滑滚动至页面顶部"><a href="#平滑滚动至页面顶部" class="headerlink" title="平滑滚动至页面顶部"></a>平滑滚动至页面顶部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;a[href=&apos;#top&apos;]&quot;).click(function() &#123;</div><div class="line">    $(&quot;html, body&quot;).animate(&#123;</div><div class="line">        scrollTop: 0</div><div class="line">    &#125;, &quot;slow&quot;);</div><div class="line">    return false;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="保持始终处于顶部"><a href="#保持始终处于顶部" class="headerlink" title="保持始终处于顶部"></a>保持始终处于顶部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">var $win = $(window);</div><div class="line">var $nav = $(&apos;.mytoolbar&apos;);</div><div class="line">var navTop = $(&apos;.mytoolbar&apos;).length &amp;&amp; $(&apos;.mytoolbar&apos;).offset().top;</div><div class="line">var isFixed = 0;</div><div class="line"></div><div class="line">processScroll()</div><div class="line">$win.on(&apos;scroll&apos;, processScroll)</div><div class="line"></div><div class="line">function processScroll() &#123;</div><div class="line">    var i, scrollTop = $win.scrollTop()</div><div class="line">    if(scrollTop &gt;= navTop &amp;&amp; !isFixed) &#123;</div><div class="line">        isFixed = 1</div><div class="line">        $nav.addClass(&apos;subnav-fixed&apos;)</div><div class="line">    &#125; else if(scrollTop &lt;= navTop &amp;&amp; isFixed) &#123;</div><div class="line">        isFixed = 0</div><div class="line">        $nav.removeClass(&apos;subnav-fixed&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="替换html标签"><a href="#替换html标签" class="headerlink" title="替换html标签"></a>替换html标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;li&apos;).replaceWith(function() &#123;</div><div class="line">    return $(&quot;&lt;div /&gt;&quot;).append($(this).contents());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="检测小屏幕宽度"><a href="#检测小屏幕宽度" class="headerlink" title="检测小屏幕宽度"></a>检测小屏幕宽度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var responsive_viewport = $(window).width();</div><div class="line">/* 如果小于 481px */</div><div class="line">if(responsive_viewport &lt; 481) &#123;</div><div class="line">    alert(&apos;屏幕小于481px&apos;);</div><div class="line">&#125; /* 属于小屏 */</div></pre></td></tr></table></figure>
<h3 id="自动修复损坏图片"><a href="#自动修复损坏图片" class="headerlink" title="自动修复损坏图片"></a>自动修复损坏图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;img&apos;).error(function() &#123;</div><div class="line">    $(this).attr(&apos;src&apos;, &apos;img/broken.png&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="检测复制、-粘贴与剪切操作"><a href="#检测复制、-粘贴与剪切操作" class="headerlink" title="检测复制、 粘贴与剪切操作"></a>检测复制、 粘贴与剪切操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(&quot;#textA&quot;).bind(&apos;copy&apos;, function() &#123;</div><div class="line">    $(&apos;span&apos;).text(&apos;copy behaviour detected!&apos;)</div><div class="line">&#125;);</div><div class="line">$(&quot;#textA&quot;).bind(&apos;paste&apos;, function() &#123;</div><div class="line">    $(&apos;span&apos;).text(&apos;paste behaviour detected!&apos;)</div><div class="line">&#125;);</div><div class="line">$(&quot;#textA&quot;).bind(&apos;cut&apos;, function() &#123;</div><div class="line">    $(&apos;span&apos;).text(&apos;cut behaviour detected!&apos;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="自动为外部链接添加target-“blank”-属性"><a href="#自动为外部链接添加target-“blank”-属性" class="headerlink" title="自动为外部链接添加target = “blank” 属性"></a>自动为外部链接添加target = “blank” 属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var root = location.protocol + &apos;//&apos; + location.host;</div><div class="line">$(&apos;a&apos;).not(&apos;:contains(root)&apos;).click(function() &#123;</div><div class="line">    this.target = &quot;_blank&quot;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="悬停时淡入-淡出"><a href="#悬停时淡入-淡出" class="headerlink" title="悬停时淡入 / 淡出"></a>悬停时淡入 / 淡出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function() &#123;</div><div class="line">    $(&quot;.thumbs img&quot;).fadeTo(&quot;slow&quot;, 0.6); // This sets the opacity of the thumbs to fade down to 60% when the page loads</div><div class="line">    $(&quot;.thumbs img&quot;).hover(function() &#123;</div><div class="line">        $(this).fadeTo(&quot;slow&quot;, 1.0); // This should set the opacity to 100% on hover</div><div class="line">    &#125;, function() &#123;</div><div class="line">        $(this).fadeTo(&quot;slow&quot;, 0.6); // This should set the opacity back to 60% on mouseout</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="禁用文本-密码输入中的空格"><a href="#禁用文本-密码输入中的空格" class="headerlink" title="禁用文本 / 密码输入中的空格"></a>禁用文本 / 密码输入中的空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&apos;input.nospace&apos;).keydown(function(e) &#123;</div><div class="line">    if(e.keyCode == 32) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;检测IE浏览器&quot;&gt;&lt;a href=&quot;#检测IE浏览器&quot; class=&quot;headerlink&quot; title=&quot;检测IE浏览器&quot;&gt;&lt;/a&gt;检测IE浏览器&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 面向对象编程</title>
    <link href="http://yoursite.com//template/20151122/js-object-oriented/"/>
    <id>http://yoursite.com//template/20151122/js-object-oriented/</id>
    <published>2015-11-21T16:00:00.000Z</published>
    <updated>2016-11-16T07:50:16.421Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道Javascript中的变量定义基本如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var name = &apos;Chen Hao&apos;;</div><div class="line">var email = &apos;haoel(@)hotmail.com&apos;;</div><div class="line">var website = &apos;http://coolshell.cn&apos;;</div><div class="line">　　如果要用对象来写的话，就是下面这个样子：</div><div class="line">var chenhao = &#123;</div><div class="line">　　    name : &apos;Chen Hao&apos;,</div><div class="line">　　    email : &apos;haoel(@)hotmail.com&apos;,</div><div class="line">　　    website : &apos;http://coolshell.cn&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>于是，我就可以这样访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//以成员的方式</div><div class="line">chenhao.name;</div><div class="line">chenhao.email;</div><div class="line">chenhao.website;</div><div class="line">//以hash map的方式</div><div class="line">chenhao[&quot;name&quot;];</div><div class="line">chenhao[&quot;email&quot;];</div><div class="line">chenhao[&quot;website&quot;];</div></pre></td></tr></table></figure>
<p>关于函数，我们知道Javascript的函数是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var doSomething = function()&#123;</div><div class="line">   alert(&apos;Hello World.&apos;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>于是，我们可以这么干：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var sayHello = function()&#123;</div><div class="line">   var hello = &quot;Hello, I&apos;m &quot;+ this.name</div><div class="line">                + &quot;， my email is: &quot; + this.email</div><div class="line">                + &quot;， my website is: &quot; + this.website;</div><div class="line">   alert(hello);</div><div class="line">&#125;;</div><div class="line">//直接赋值，这里很像C/C++的函数指针</div><div class="line">chenhao.Hello = sayHello;</div><div class="line">chenhao.Hello();</div></pre></td></tr></table></figure>
<p>相信这些东西都比较简单，大家都明白了。 可以看到Javascript对象函数是直接声明，直接赋值，直接就用了。runtime的动态语言。<br>还有一种比较规范的写法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//我们可以看到， 其用function来做class。</div><div class="line">var Person = function(name, email, website)&#123;</div><div class="line">    this.name = name;</div><div class="line">    this.email = email;</div><div class="line">    this.website = website;</div><div class="line">    this.sayHello = function()&#123;</div><div class="line">        var hello = &quot;Hello, I&apos;m &quot;+ this.name  + &quot;， \n&quot; +</div><div class="line">                    &quot;my email is: &quot; + this.email + &quot;， \n&quot; +</div><div class="line">                    &quot;my website is: &quot; + this.website;</div><div class="line">        alert(hello);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line">var chenhao = new Person(&quot;Chen Hao&quot;, &quot;haoel@hotmail.com&quot;,&quot;http://coolshell.cn&quot;);</div><div class="line">chenhao.sayHello();</div></pre></td></tr></table></figure>
<p>顺便说一下，要删除对象的属性，很简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete chenhao[&apos;email&apos;]</div></pre></td></tr></table></figure>
<p>上面的这些例子，我们可以看到这样几点：<br>Javascript的数据和成员封装很简单。没有类完全是对象操作。纯动态！<br>Javascript function中的this指针很关键，如果没有的话，那就是局部变量或局部函数。<br>Javascript对象成员函数可以在使用时临时声明，并把一个全局函数直接赋过去就好了。<br>Javascript的成员函数可以在实例上进行修改，也就是说不同实例相同函数名的行为不一定一样。</p>
<h3 id="属性配置-–-Object-defineProperty"><a href="#属性配置-–-Object-defineProperty" class="headerlink" title="属性配置 – Object.defineProperty"></a>属性配置 – Object.defineProperty</h3><p>先看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//创建对象</div><div class="line">var chenhao = Object.create(null);</div><div class="line">//设置一个属性</div><div class="line">Object.defineProperty( chenhao,</div><div class="line">                &apos;name&apos;, &#123; value:  &apos;Chen Hao&apos;,</div><div class="line">                          writable:     true,</div><div class="line">                          configurable: true,</div><div class="line">                          enumerable:   true &#125;);</div><div class="line">//设置多个属性</div><div class="line">Object.defineProperties( chenhao,</div><div class="line">    &#123;</div><div class="line">        &apos;email&apos;  : &#123; value:  &apos;haoel@hotmail.com&apos;,</div><div class="line">                     writable:     true,</div><div class="line">                     configurable: true,</div><div class="line">                     enumerable:   true &#125;,</div><div class="line">        &apos;website&apos;: &#123; value: &apos;http://coolshell.cn&apos;,</div><div class="line">                     writable:     true,</div><div class="line">                     configurable: true,</div><div class="line">                     enumerable:   true &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>下面就说说这些属性配置是什么意思。<br>writable：这个属性的值是否可以改。<br>configurable：这个属性的配置是否可以改。<br>enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。<br>value：属性值。<br>get()/set(_value)：get和set访问器。<br>Get/Set 访问器<br>关于get/set访问器，它的意思就是用get/set来取代value（其不能和value一起使用），示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var  age = 0;</div><div class="line">Object.defineProperty( chenhao,</div><div class="line">            &apos;age&apos;, &#123;</div><div class="line">                      get: function() &#123; return age+1; &#125;,</div><div class="line">                      set: function(value) &#123; age = value; &#125;</div><div class="line">                      enumerable : true,</div><div class="line">                      configurable : true</div><div class="line">                    &#125;</div><div class="line">);</div><div class="line">chenhao.age = 100; //调用set</div><div class="line">alert(chenhao.age); //调用get 输出101（get中+1了）;</div></pre></td></tr></table></figure>
<p>我们再看一个更为实用的例子——利用已有的属性(age)通过get和set构造新的属性(birth_year)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Object.defineProperty( chenhao,</div><div class="line">    &apos;birth_year&apos;,</div><div class="line">    &#123;</div><div class="line">        get: function() &#123;</div><div class="line">            var d = new Date();</div><div class="line">            var y = d.getFullYear();</div><div class="line">            return ( y - this.age );</div><div class="line">        &#125;,</div><div class="line">        set: function(year) &#123;</div><div class="line">            var d = new Date();</div><div class="line">            var y = d.getFullYear();</div><div class="line">            this.age = y - year;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">alert(chenhao.birth_year);</div><div class="line">chenhao.birth_year = 2000;</div><div class="line">alert(chenhao.age);</div></pre></td></tr></table></figure>
<p>这样做好像有点麻烦，你说，我为什么不写成下面这个样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var chenhao = &#123;</div><div class="line">    name: &quot;Chen Hao&quot;,</div><div class="line">    email: &quot;haoel@hotmail.com&quot;,</div><div class="line">    website: &quot;http://coolshell.cn&quot;,</div><div class="line">    age: 100,</div><div class="line">    get birth_year() &#123;</div><div class="line">        var d = new Date();</div><div class="line">        var y = d.getFullYear();</div><div class="line">        return ( y - this.age );</div><div class="line">    &#125;,</div><div class="line">    set birth_year(year) &#123;</div><div class="line">        var d = new Date();</div><div class="line">        var y = d.getFullYear();</div><div class="line">        this.age = y - year;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">alert(chenhao.birth_year);</div><div class="line">chenhao.birth_year = 2000;</div><div class="line">alert(chenhao.age);</div></pre></td></tr></table></figure>
<p>是的，你的确可以这样的，不过通过defineProperty()你可以干这些事：<br>1）设置如 writable，configurable，enumerable 等这类的属性配置。<br>2）动态地为一个对象加属性。比如：一些HTML的DOM对像。</p>
<h3 id="查看对象属性配置"><a href="#查看对象属性配置" class="headerlink" title="查看对象属性配置"></a>查看对象属性配置</h3><p>如果查看并管理对象的这些配置，下面有个程序可以输出对象的属性和配置等东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//列出对象的属性.</div><div class="line">function listProperties(obj)</div><div class="line">&#123;</div><div class="line">    var newLine = &quot;&lt;br /&gt;&quot;;</div><div class="line">    var names = Object.getOwnPropertyNames(obj);</div><div class="line">    for (var i = 0; i &lt; names.length; i++) &#123;</div><div class="line">        var prop = names[i];</div><div class="line">        document.write(prop + newLine);</div><div class="line">        // 列出对象的属性配置（descriptor）动用getOwnPropertyDescriptor函数。</div><div class="line">        var descriptor = Object.getOwnPropertyDescriptor(obj, prop);</div><div class="line">        for (var attr in descriptor) &#123;</div><div class="line">            document.write(&quot;...&quot; + attr + &apos;: &apos; + descriptor[attr]);</div><div class="line">            document.write(newLine);</div><div class="line">        &#125;</div><div class="line">        document.write(newLine);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">listProperties(chenhao);</div></pre></td></tr></table></figure>
<h3 id="call-apply-bind-和-this"><a href="#call-apply-bind-和-this" class="headerlink" title="call, apply, bind 和 this"></a>call, apply, bind 和 this</h3><p>关于Javascript的this指针，和C++/Java很类似。 我们来看个示例：（这个示例很简单了，我就不多说了）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function print(text)&#123;</div><div class="line">    document.write(this.value + &apos; - &apos; + text+ &apos;&lt;br&gt;&apos;);</div><div class="line">&#125;</div><div class="line">var a = &#123;value: 10, print : print&#125;;</div><div class="line">var b = &#123;value: 20, print : print&#125;;</div><div class="line">print(&apos;hello&apos;);// this =&gt; global, output &quot;undefined - hello&quot;</div><div class="line">a.print(&apos;a&apos;);// this =&gt; a, output &quot;10 - a&quot;</div><div class="line">b.print(&apos;b&apos;); // this =&gt; b, output &quot;20 - b&quot;</div><div class="line">a[&apos;print&apos;](&apos;a&apos;); // this =&gt; a, output &quot;10 - a&quot;</div></pre></td></tr></table></figure>
<p>我们再来看看call 和 apply，这两个函数的差别就是参数的样子不一样，另一个就是性能不一样，apply的性能要差很多。（关于性能，可到 JSPerf 上去跑跑看看）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print.call(a, &apos;a&apos;); // this =&gt; a, output &quot;10 - a&quot;</div><div class="line">print.call(b, &apos;b&apos;); // this =&gt; b, output &quot;20 - b&quot;</div><div class="line">print.apply(a, [&apos;a&apos;]); // this =&gt; a, output &quot;10 - a&quot;</div><div class="line">print.apply(b, [&apos;b&apos;]); // this =&gt; b, output &quot;20 - b&quot;</div></pre></td></tr></table></figure>
<p>但是在bind后，this指针，可能会有不一样，但是因为Javascript是动态的。如下面的示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var p = print.bind(a);</div><div class="line">p(&apos;a&apos;);             // this =&gt; a, output &quot;10 - a&quot;</div><div class="line">p.call(b, &apos;b&apos;);     // this =&gt; a, output &quot;10 - b&quot;</div><div class="line">p.apply(b, [&apos;b&apos;]);  // this =&gt; a, output &quot;10 - b&quot;</div></pre></td></tr></table></figure>
<h3 id="继承-和-重载"><a href="#继承-和-重载" class="headerlink" title="继承 和 重载"></a>继承 和 重载</h3><p>通过上面的那些示例，我们可以通过Object.create()来实际继承，请看下面的代码，Student继承于Object。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var Person = Object.create(null);</div><div class="line">Object.defineProperties</div><div class="line">(</div><div class="line">    Person,</div><div class="line">    &#123;</div><div class="line">        &apos;name&apos;  : &#123;  value: &apos;Chen Hao&apos;&#125;,</div><div class="line">        &apos;email&apos;  : &#123; value : &apos;haoel@hotmail.com&apos;&#125;,</div><div class="line">        &apos;website&apos;: &#123; value: &apos;http://coolshell.cn&apos;&#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">Person.sayHello = function () &#123;</div><div class="line">    var hello = &quot;&lt;p&gt;Hello, I am &quot;+ this.name  + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my email is: &quot; + this.email + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my website is: &quot; + this.website;</div><div class="line">    document.write(hello + &quot;&lt;br&gt;&quot;);</div><div class="line">&#125;</div><div class="line">var Student = Object.create(Person);</div><div class="line">Student.no = &quot;1234567&quot;; //学号</div><div class="line">Student.dept = &quot;Computer Science&quot;; //系</div><div class="line">//使用Person的属性</div><div class="line">document.write(Student.name + &apos; &apos; + Student.email + &apos; &apos; + Student.website +&apos;&lt;br&gt;&apos;);</div><div class="line">//使用Person的方法</div><div class="line">Student.sayHello();</div><div class="line">//重载SayHello方法</div><div class="line">Student.sayHello = function (person) &#123;</div><div class="line">    var hello = &quot;&lt;p&gt;Hello, I am &quot;+ this.name  + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my email is: &quot; + this.email + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my website is: &quot; + this.website + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my student no is: &quot; + this. no + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my departent is: &quot; + this. dept;</div><div class="line">    document.write(hello + &apos;&lt;br&gt;&apos;);</div><div class="line">&#125;</div><div class="line">//再次调用</div><div class="line">Student.sayHello();</div><div class="line">//查看Student的属性（只有 no 、 dept 和 重载了的sayHello）</div><div class="line">document.write(&apos;&lt;p&gt;&apos; + Object.keys(Student) + &apos;&lt;br&gt;&apos;);</div></pre></td></tr></table></figure>
<p>通用上面这个示例，我们可以看到，Person里的属性并没有被真正复制到了Student中来，但是我们可以去存取。这是因为Javascript用委托实现了这一机制。其实，这就是Prototype，Person是Student的Prototype。<br>当我们的代码需要一个属性的时候，Javascript的引擎会先看当前的这个对象中是否有这个属性，如果没有的话，就会查找他的Prototype对象是否有这个属性，一直继续下去，直到找到或是直到没有Prototype对象。<br>为了证明这个事，我们可以使用Object.getPrototypeOf()来检验一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Student.name = &apos;aaa&apos;;</div><div class="line">//输出 aaa</div><div class="line">document.write(&apos;&lt;p&gt;&apos; + Student.name + &apos;&lt;/p&gt;&apos;);</div><div class="line">//输出 Chen Hao</div><div class="line">document.write(&apos;&lt;p&gt;&apos; +Object.getPrototypeOf(Student).name + &apos;&lt;/p&gt;&apos;);</div></pre></td></tr></table></figure>
<p>于是，你还可以在子对象的函数里调用父对象的函数，就好像C++里的 Base::func() 一样。于是，我们重载hello的方法就可以使用父类的代码了，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//新版的重载SayHello方法</div><div class="line">Student.sayHello = function (person) &#123;</div><div class="line">    Object.getPrototypeOf(this).sayHello.call(this);</div><div class="line">    var hello = &quot;my student no is: &quot; + this. no + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my departent is: &quot; + this. dept;</div><div class="line">    document.write(hello + &apos;&lt;br&gt;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个很强大吧。</p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>上面的那个东西还不能满足我们的要求，我们可能希望这些对象能真正的组合起来。为什么要组合？因为我们都知道是这是OO设计的最重要的东西。不过，这对于Javascript来并没有支持得特别好，不好我们依然可以搞定个事。<br>首先，我们需要定义一个Composition的函数：（target是作用于是对象，source是源对象），下面这个代码还是很简单的，就是把source里的属性一个一个拿出来然后定义到target中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Composition(target, source)</div><div class="line">&#123;</div><div class="line">    var desc  = Object.getOwnPropertyDescriptor;</div><div class="line">    var prop  = Object.getOwnPropertyNames;</div><div class="line">    var def_prop = Object.defineProperty;</div><div class="line">    prop(source).forEach(</div><div class="line">        function(key) &#123;</div><div class="line">            def_prop(target, key， desc(source, key))</div><div class="line">        &#125;</div><div class="line">    )</div><div class="line">    return target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了这个函数以后，我们就可以这来玩了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//艺术家</div><div class="line">var Artist = Object.create(null);</div><div class="line">Artist.sing = function() &#123;</div><div class="line">    return this.name + &apos; starts singing...&apos;;</div><div class="line">&#125;</div><div class="line">Artist.paint = function() &#123;</div><div class="line">    return this.name + &apos; starts painting...&apos;;</div><div class="line">&#125;</div><div class="line">//运动员</div><div class="line">var Sporter = Object.create(null);</div><div class="line">Sporter.run = function() &#123;</div><div class="line">    return this.name + &apos; starts running...&apos;;</div><div class="line">&#125;</div><div class="line">Sporter.swim = function() &#123;</div><div class="line">    return this.name + &apos; starts swimming...&apos;;</div><div class="line">&#125;</div><div class="line">Composition(Person, Artist);</div><div class="line">document.write(Person.sing() + &apos;&lt;br&gt;&apos;);</div><div class="line">document.write(Person.paint() + &apos;&lt;br&gt;&apos;);</div><div class="line">Composition(Person, Sporter);</div><div class="line">document.write(Person.run() + &apos;&lt;br&gt;&apos;);</div><div class="line">document.write(Person.swim() + &apos;&lt;br&gt;&apos;);</div><div class="line">//看看 Person中有什么？（输出：sayHello,sing,paint,swim,run）</div><div class="line">document.write(&apos;&lt;p&gt;&apos; + Object.keys(Person) + &apos;&lt;br&gt;&apos;);</div></pre></td></tr></table></figure>
<h3 id="Prototype-和-继承"><a href="#Prototype-和-继承" class="headerlink" title="Prototype 和 继承"></a>Prototype 和 继承</h3><p>我们先来说说Prototype。我们先看下面的例程，这个例程不需要解释吧，很像C语言里的函数指针，在C语言里这样的东西见得多了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var plus = function(x，y)&#123;</div><div class="line">    document.write( x + &apos; + &apos; + y + &apos; = &apos; + (x+y) + &apos;&lt;br&gt;&apos;);</div><div class="line">    return x + y;</div><div class="line">&#125;;</div><div class="line">var minus = function(x，y)&#123;</div><div class="line">    document.write(x + &apos; - &apos; + y + &apos; = &apos; + (x-y) + &apos;&lt;br&gt;&apos;);</div><div class="line">    return x - y;</div><div class="line">&#125;;</div><div class="line">var operations = &#123;</div><div class="line">    &apos;+&apos;: plus,</div><div class="line">    &apos;-&apos;: minus</div><div class="line">&#125;;</div><div class="line">var calculate = function(x， y， operation)&#123;</div><div class="line">    return operations[operation](x， y);</div><div class="line">&#125;;</div><div class="line">calculate(12, 4, &apos;+&apos;);</div><div class="line">calculate(24, 3, &apos;-&apos;);</div></pre></td></tr></table></figure>
<p>那么，我们能不能把这些东西封装起来呢，我们需要使用prototype。看下面的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var Cal = function(x， y)&#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">&#125;</div><div class="line">Cal.prototype.operations = &#123;</div><div class="line">    &apos;+&apos;: function(x， y) &#123; return x+y;&#125;,</div><div class="line">    &apos;-&apos;: function(x， y) &#123; return x-y;&#125;</div><div class="line">&#125;;</div><div class="line">Cal.prototype.calculate = function(operation)&#123;</div><div class="line">    return this.operations[operation](this.x， this.y);</div><div class="line">&#125;;</div><div class="line">var c = new Cal(4, 5);</div><div class="line">Cal.calculate(&apos;+&apos;);</div><div class="line">Cal.calculate(&apos;-&apos;);</div></pre></td></tr></table></figure>
<p>这就是prototype的用法，prototype 是javascript这个语言中最重要的内容。网上有太多的文章介始这个东西了。说白了，prototype就是对一对象进行扩展，其特点在于通过“复制”一个已经存在的实例来返回新的实例，而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的（当然，这里没有真正的复制，实际只是委托）。上面的这个例子中，我们扩展了实例Cal，让其有了一个operations的属性和一个calculate的方法。<br>这样，我们可以通过这一特性来实现继承。还记得我们最最前面的那个Person吧， 下面的示例是创建一个Student来继承Person。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">function Person(name, email, website)&#123;</div><div class="line">    this.name = name;</div><div class="line">    this.email = email;</div><div class="line">    this.website = website;</div><div class="line">&#125;;</div><div class="line">Person.prototype.sayHello = function()&#123;</div><div class="line">    var hello = &quot;Hello, I am &quot;+ this.name  + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my email is: &quot; + this.email + &quot;， &lt;br&gt;&quot; +</div><div class="line">                &quot;my website is: &quot; + this.website;</div><div class="line">    return hello;</div><div class="line">&#125;;</div><div class="line">function Student(name, email, website, no, dept)&#123;</div><div class="line">    var proto = Object.getPrototypeOf;</div><div class="line">    proto(Student.prototype).constructor.call(this, name, email, website);</div><div class="line">    this.no = no;</div><div class="line">    this.dept = dept;</div><div class="line">&#125;</div><div class="line">// 继承prototype</div><div class="line">Student.prototype = Object.create(Person.prototype);</div><div class="line">//重置构造函数</div><div class="line">Student.prototype.constructor = Student;</div><div class="line">//重载sayHello()</div><div class="line">Student.prototype.sayHello = function()&#123;</div><div class="line">    var proto = Object.getPrototypeOf;</div><div class="line">    var hello = proto(Student.prototype).sayHello.call(this) + &apos;&lt;br&gt;&apos;;</div><div class="line">    hello += &quot;my student no is: &quot; + this. no + &quot;， &lt;br&gt;&quot; +</div><div class="line">             &quot;my departent is: &quot; + this. dept;</div><div class="line">    return hello;</div><div class="line">&#125;;</div><div class="line">var me = new Student(</div><div class="line">    &quot;Chen Hao&quot;,</div><div class="line">    &quot;haoel@hotmail.com&quot;,</div><div class="line">    &quot;http://coolshell.cn&quot;,</div><div class="line">    &quot;12345678&quot;,</div><div class="line">    &quot;Computer Science&quot;</div><div class="line">);</div><div class="line">document.write(me.sayHello());</div></pre></td></tr></table></figure>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>上面的这些代码并不一定能在所有的浏览器下都能运行，因为上面这些代码遵循 ECMAScript 5 的规范，关于ECMAScript 5 的浏览器兼容列表，你可以看这里“ES5浏览器兼容表”。<br>本文中的所有代码都在Chrome最新版中测试过了。<br>下面是一些函数，可以用在不兼容ES5的浏览器中：<br>Object.create()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function clone(proto) &#123;</div><div class="line">    function Dummy() &#123; &#125;</div><div class="line">    Dummy.prototype             = proto;</div><div class="line">    Dummy.prototype.constructor = Dummy;</div><div class="line">    return new Dummy(); //等价于Object.create(Person);</div><div class="line">&#125;</div><div class="line">var me = clone(Person);</div></pre></td></tr></table></figure>
<p>defineProperty()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function defineProperty(target, key， descriptor) &#123;</div><div class="line">    if (descriptor.value)&#123;</div><div class="line">        target[key] = descriptor.value;</div><div class="line">    &#125;else &#123;</div><div class="line">        descriptor.get &amp;&amp; target.__defineGetter__(key， descriptor.get);</div><div class="line">        descriptor.set &amp;&amp; target.__defineSetter__(key， descriptor.set);</div><div class="line">    &#125;</div><div class="line">    return target</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>keys()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function keys(object) &#123; var result, key</div><div class="line">    result = [];</div><div class="line">    for (key in object)&#123;</div><div class="line">        if (object.hasOwnProperty(key))  result.push(key)</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Object.getPrototypeOf() 函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function proto(object) &#123;</div><div class="line">    return !object?                null</div><div class="line">         : &apos;__proto__&apos; in object?  object.__proto__</div><div class="line">         : /* not exposed? */      object.constructor.prototype</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>bind 函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var slice = [].slice</div><div class="line">function bind(fn, bound_this) &#123; var bound_args</div><div class="line">    bound_args = slice.call(arguments, 2)</div><div class="line">    return function() &#123; var args</div><div class="line">        args = bound_args.concat(slice.call(arguments))</div><div class="line">        return fn.apply(bound_this, args) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道Javascript中的变量定义基本如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>jquery留着以后用</title>
    <link href="http://yoursite.com//template/20151102/jquery-nature/"/>
    <id>http://yoursite.com//template/20151102/jquery-nature/</id>
    <published>2015-11-01T16:00:00.000Z</published>
    <updated>2016-11-16T07:00:27.426Z</updated>
    
    <content type="html"><![CDATA[  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">1. 如何创建嵌套的过滤器</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:微软雅黑"><span style="line-height: 21px; color: black; background: white;">    </span></span><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//允许你减少集合中的匹配元素的过滤器， 
    //只剩下那些与给定的选择器匹配的部分。在这种情况下， 
    //查询删除了任何没（:not）有（:has） 
    //包含class为“selected”（.selected）的子节点。</span><span style="font-family:Consolas">
  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">.filter(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;:not(:has(.selected))&quot;</span><span style="line-height: 21px; color: black; background: white;">)</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">2. 如何重用元素搜索</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">allItems = $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;div.item&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">); 
  </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">keepList = $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;div#container1 div.item&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">); 
</span><span style="font-family:微软雅黑">    </span></span><span style="line-height: 21px; color: green; background: white;"><span style="font-family:Consolas"><span style="font-family:微软雅黑">//现在你可以继续使用这些jQuery对象来工作了。例如， 
    //基于复选框裁剪“keep list”，复选框的名称 
    //符合</span> </span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">&lt;</span><span style="line-height: 21px; color: maroon; background: white;">DIV</span><span style="line-height: 21px; color: blue; background: white;">&gt;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">class names:</span><pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="background: white;">  $(formToLookAt + </span><span style="color: rgb(163, 21, 21); background: white;">&quot; input:checked&quot;</span><span style="background: white;">).each(</span><span style="color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="background: white;">() {
    keepList = keepList.filter(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;.&quot; </span><span style="background: white;">+ $(</span><span style="color: blue; background: white;">this</span><span style="background: white;">).attr(</span></span><span style="color: rgb(163, 21, 21); background: white;"><span style="font-family:Consolas">&quot;name&quot;</span></span><span style="background: white;"><span style="font-family:Consolas">));
  });</span></span></pre></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">DIV</span><span style="line-height: 21px; color: blue; background: white;">&gt;</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">3. 任何使用has()来检查某个元素是否包含某个类或是元素</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family:微软雅黑">    </span></span><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//jQuery 1.4.*包含了对这一has方法的支持。该方法找出 
    //某个元素是否包含了其他另一个元素类或是其他任何的 
    //你正在查找并要在其之上进行操作的东东。</span><span style="font-family:Consolas">  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;input&quot;</span><span style="line-height: 21px; color: black; background: white;">).has(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;.email&quot;</span><span style="line-height: 21px; color: black; background: white;">).addClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;email_icon&quot;</span><span style="line-height: 21px; color: black; background: white;">);</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">4. 如何使用jQuery来切换样式表</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">    //找出你希望切换的媒体类型（media-type），然后把href设置成新的样式表。</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'link[media=&quot;screen&quot;]'</span><span style="color: black; background: white;">).attr(</span><span style="color: rgb(163, 21, 21); background: white;">'href'</span><span style="color: black; background: white;">,</span><span style="color: rgb(163, 21, 21); background: white;">'Alternative.css'</span><span style="color: black; background: white;">);</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">5. 如何限制选择范围（基于优化目的）</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">    //尽可能使用标签名来作为类名的前缀， 
    //这样jQuery就不需要花费更多的时间来搜索 
    //你想要的元素。还要记住的一点是， 
    //针对于你的页面上的元素的操作越具体化， 
    //就越能降低执行和搜索的时间。</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">in_stock = $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#shopping_cart_items input.is_in_stock'</span><span style="line-height: 21px; color: black; background: white;">);</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">&lt;</span><span style="line-height: 21px; color: maroon; background: white;">ul </span><span style="line-height: 21px; color: red; background: white;">id</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">=&quot;shopping_cart_items&quot;&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">input </span><span style="line-height: 21px; color: red; background: white;">type</span><span style="line-height: 21px; color: blue; background: white;">=&quot;radio&quot; </span><span style="line-height: 21px; color: red; background: white;">value</span><span style="line-height: 21px; color: blue; background: white;">=&quot;Item-X&quot; </span><span style="line-height: 21px; color: red; background: white;">name</span><span style="line-height: 21px; color: blue; background: white;">=&quot;item&quot; </span><span style="line-height: 21px; color: red; background: white;">class</span><span style="line-height: 21px; color: blue; background: white;">=&quot;is_in_stock&quot; /&gt;</span><span style="line-height: 21px; color: black; background: white;">Item X</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">input </span><span style="line-height: 21px; color: red; background: white;">type</span><span style="line-height: 21px; color: blue; background: white;">=&quot;radio&quot; </span><span style="line-height: 21px; color: red; background: white;">value</span><span style="line-height: 21px; color: blue; background: white;">=&quot;Item-Y&quot; </span><span style="line-height: 21px; color: red; background: white;">name</span><span style="line-height: 21px; color: blue; background: white;">=&quot;item&quot; </span><span style="line-height: 21px; color: red; background: white;">class</span><span style="line-height: 21px; color: blue; background: white;">=&quot;3-5_days&quot; /&gt;</span><span style="line-height: 21px; color: black; background: white;">Item Y</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">input </span><span style="line-height: 21px; color: red; background: white;">type</span><span style="line-height: 21px; color: blue; background: white;">=&quot;radio&quot; </span><span style="line-height: 21px; color: red; background: white;">value</span><span style="line-height: 21px; color: blue; background: white;">=&quot;Item-Z&quot; </span><span style="line-height: 21px; color: red; background: white;">name</span><span style="line-height: 21px; color: blue; background: white;">=&quot;item&quot; </span><span style="line-height: 21px; color: red; background: white;">class</span><span style="line-height: 21px; color: blue; background: white;">=&quot;unknown&quot; /&gt;</span><span style="line-height: 21px; color: black; background: white;">Item Z</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
  &lt;/</span><span style="line-height: 21px; color: maroon; background: white;">ul</span><span style="line-height: 21px; color: blue; background: white;">&gt;</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">6. 如何正确地使用ToggleClass</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">    //切换（toggle）类允许你根据某个类的 
    //是否存在来添加或是删除该类。 
    //这种情况下有些开发者使用：</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">    </span></span><span style="line-height: 21px; color: black; background: white;">a.hasClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'blueButton'</span><span style="line-height: 21px; color: black; background: white;">) ? a.removeClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'blueButton'</span><span style="line-height: 21px; color: black; background: white;">) : a.addClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'blueButton'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">);</span></span></pre>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //toggleClass允许你使用下面的语句来很容易地做到这一点</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: black; background: white;">a.toggleClass(</span><span style="color: rgb(163, 21, 21); background: white;">'blueButton'</span><span style="color: black; background: white;">);</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">7. 如何设置IE特有的功能</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> if</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">($.browser.msie) {<br></span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;">// Internet Explorer<span style="font-family: 微软雅黑;">其实不那么好用</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: black; background: white;"> }</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">8. 如何使用jQuery来代替一个元素</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'#thatdiv'</span><span style="color: black; background: white;">).replaceWith(</span><span style="color: rgb(163, 21, 21); background: white;">'fnuh'</span><span style="color: black; background: white;">);</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">9. 如何验证某个元素是否为空</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">($(</span><span style="color: rgb(163, 21, 21); background: white;">'#keks'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">).html().trim()) {<br></span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//什么都没有找到;</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: black; background: white;"> }</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">10. 如何从一个未排序的集合中找出某个元素的索引号</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;ul &gt; li&quot;</span><span style="line-height: 21px; color: black; background: white;">).click(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {    </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">index = $(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">).prevAll().length;
  });</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">11. 如何把函数绑定到事件上</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#foo'</span><span style="line-height: 21px; color: black; background: white;">).bind(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'click'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    alert(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'User clicked on &quot;foo.&quot;'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">12. 如何追加或是添加html到元素中</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'#lal'</span><span style="color: black; background: white;">).append(</span><span style="color: rgb(163, 21, 21); background: white;">'sometext'</span><span style="color: black; background: white;">);</span></span>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">13. 在创建元素时，如何使用对象字面量（literal）来定义属性</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> var</span><span style="color: black; background: white;">e = $(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;&quot;</span><span style="color: black; background: white;">, { href:</span><span style="color: rgb(163, 21, 21); background: white;">&quot;#&quot;</span><span style="color: black; background: white;">,</span><span style="color: blue; background: white;">class</span><span style="color: black; background: white;">:</span><span style="color: rgb(163, 21, 21); background: white;">&quot;a-class another-class&quot;</span><span style="color: black; background: white;">, title:</span><span style="color: rgb(163, 21, 21); background: white;">&quot;...&quot;</span><span style="color: black; background: white;">});</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">14. 如何使用多个属性来进行过滤</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">    //在使用许多相类似的有着不同类型的input元素时， 
    //这种基于精确度的方法很有用</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">   <span style="font-family:Consolas"> </span></span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">elements = $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#someid input[type=sometype][value=somevalue]'</span><span style="line-height: 21px; color: black; background: white;">).get();</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">15. 如何使用jQuery来预加载图像</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  jQuery.preloadImages = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {    </span><span style="line-height: 21px; color: blue; background: white;">for </span><span style="line-height: 21px; color: black; background: white;">(</span><span style="line-height: 21px; color: blue; background: white;">var </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">i = 0; i &lt; arguments.length; i++) {
      $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;&lt;img /&gt;&quot;</span><span style="line-height: 21px; color: black; background: white;">).attr(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'src'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">, arguments[i]);
    }
  };</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //用法</span></span><span style="color: black; background: white;">$.preloadImages(</span><span style="color: rgb(163, 21, 21); background: white;">'image1.gif'</span><span style="color: black; background: white;">,</span><span style="color: rgb(163, 21, 21); background: white;">'/path/to/image2.png'</span><span style="color: black; background: white;">,</span><span style="color: rgb(163, 21, 21); background: white;">'some/image3.jpg'</span><span style="color: black; background: white;">);</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">16. 如何为任何与选择器相匹配的元素设置事件处理程序</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'button.someClass'</span><span style="line-height: 21px; color: black; background: white;">).live(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'click'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">, someFunction);</span><span style="font-family:微软雅黑">    </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//注意，在jQuery 1.4.2中，delegate和undelegate选项 
    //被引入代替live，因为它们提供了更好的上下文支持 
    //例如，就table来说，以前你会用</span> 
   //.live() 
  </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;table&quot;</span><span style="line-height: 21px; color: black; background: white;">).each(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;td&quot;</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).live(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;hover&quot;</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
      $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).toggleClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;hover&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
    });
  });</span><span style="font-family:微软雅黑">    </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//现在用</span> 
  </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;table&quot;</span><span style="line-height: 21px; color: black; background: white;">).delegate(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;td&quot;</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;hover&quot;</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).toggleClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;hover&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">17. 如何找到一个已经被选中的option元素</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'#someElement'</span><span style="color: black; background: white;">).find(</span><span style="color: rgb(163, 21, 21); background: white;">'option:selected'</span><span style="color: black; background: white;">);</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">18. 如何隐藏一个包含了某个值文本的元素</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;p.value:contains('thetextvalue')&quot;</span><span style="color: black; background: white;">).hide();</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">19. 如果自动滚动到页面中的某区域</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> jQuery.fn.autoscroll =</span><span style="color: blue; background: white;">function</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">(selector) {</span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'html,body'</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">).animate( { scrollTop: $(</span><span style="color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">).offset().top },<br> 500<br> );<br> }</span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //然后像这样来滚动到你希望去到的class/area上。</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'.area_name'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">).autoscroll();</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">20. 如何检测各种浏览器</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">( $.browser.safari)</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//检测Safari</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">($.browser.msie &amp;&amp; $.browser.version &gt; 6 )</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//检测IE6及之后版本</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">($.browser.msie &amp;&amp; $.browser.version &lt;= 6 )</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//检测IE6及之前版本</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">($.browser.mozilla &amp;&amp; $.browser.version &gt;=</span><span style="color: rgb(163, 21, 21); background: white;">'1.8'</span><span style="color: black; background: white;">)</span></span><span style="line-height: 21px; font-family: 微软雅黑;"><span style="color: green; background: white;">//检测FireFox 2及之后版本</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">21. 如何替换串中的词</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> var</span><span style="color: black; background: white;">el = $(</span><span style="color: rgb(163, 21, 21); background: white;">'#id'</span></span>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">); el.html(el.html().replace(</span><span style="color: maroon; background: white;">/word/ig</span><span style="color: black; background: white;">,</span><span style="color: rgb(163, 21, 21); background: white;">''</span><span style="color: black; background: white;">));</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">22. 如何禁用右键单击上下文菜单</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(document).bind(</span><span style="color: rgb(163, 21, 21); background: white;">'contextmenu'</span><span style="color: black; background: white;">,</span><span style="color: blue; background: white;">function</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">(e) {</span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"></span><span style="color: blue; background: white;"> return false</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">;<br>});</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 21px; font-family: 微软雅黑;">23. 如何定义一个定制的选择器</span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"><pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="background: white;">  $.expr[</span><span style="color: rgb(163, 21, 21); background: white;">':'</span><span style="background: white;">].mycustomselector = </span><span style="color: blue; background: white;">function</span></span><span style="background: white;"><span style="font-family:Consolas">(element, index, meta, stack){ 
  </span></span><span style="font-family:Consolas"><span style="color: green; background: white;"><span style="font-family:微软雅黑">// element- 一个DOM元素 
    // index – 栈中的当前循环索引 
    // meta – 有关选择器的元数据 
    // stack – 要循环的所有元素的栈 
    // 如果包含了当前元素就返回true 
    // 如果不包含当前元素就返回false }; 
    // 定制选择器的用法：</span> 
   </span><span style="background: white;">$(</span><span style="color: rgb(163, 21, 21); background: white;">'.someClasses:test'</span><span style="background: white;">).doSomething(); </span></span></pre></span></span>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">24. 如何检查某个元素是否存在</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">($(</span><span style="color: rgb(163, 21, 21); background: white;">'#someDiv'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">).length) {<br></span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//你妹，终于找到了</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: black; background: white;">}</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">25. 如何使用jQuery来检测右键和左键的鼠标单击两种情况</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;#someelement&quot;</span><span style="line-height: 21px; color: black; background: white;">).live(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'click'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(e) {    </span><span style="line-height: 21px; color: blue; background: white;">if </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">((!$.browser.msie &amp;&amp; e.button == 0) || ($.browser.msie &amp;&amp; e.button == 1)) {
      alert(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;Left Mouse Button Clicked&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
    } </span><span style="line-height: 21px; color: blue; background: white;">else if </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(e.button == 2) {
      alert(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;Right Mouse Button Clicked&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
    }
  });</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">26. 如何显示或是删除input域中的默认值</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: Consolas;"><span style="font-family: 微软雅黑;">    //这段代码展示了在用户未输入值时， 
    //如何在文本类型的input域中保留 
    //一个默认值</span> </span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;.swap&quot;</span><span style="line-height: 21px; color: black; background: white;">).each(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(i) {
    wap_val[i] = $(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">).val();
    $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).focusin(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {      </span><span style="line-height: 21px; color: blue; background: white;">if </span><span style="line-height: 21px; color: black; background: white;">($(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">).val() == swap_val[i]) {
        $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).val(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
      }
    }).focusout(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {      </span><span style="line-height: 21px; color: blue; background: white;">if </span><span style="line-height: 21px; color: black; background: white;">($.trim($(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).val()) == </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">) {
        $(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">).val(swap_val[i]);
      }
    });
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">27. 如何在一段时间之后自动隐藏或关闭元素（支持1.4版本）</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //这是1.3.2中我们使用setTimeout来实现的方式</span></span></span></p>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  setTimeout(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'.mydiv'</span><span style="line-height: 21px; color: black; background: white;">).hide(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'blind'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">, {}, 500)
  }, 5000);  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//而这是在1.4中可以使用delay()这一功能来实现的方式（这很像是休眠）</span> 
  </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;.mydiv&quot;</span><span style="line-height: 21px; color: black; background: white;">).delay(5000).hide(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'blind'</span><span style="line-height: 21px; color: black; background: white;">, {}, 500);</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"></span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">28. 如何把已创建的元素动态地添加到DOM中</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> var</span><span style="color: black; background: white;">newDiv = $(</span><span style="color: rgb(163, 21, 21); background: white;">''</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">);</span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> newDiv.attr(</span><span style="color: rgb(163, 21, 21); background: white;">'id'</span><span style="color: black; background: white;">,</span><span style="color: rgb(163, 21, 21); background: white;">'myNewDiv'</span><span style="color: black; background: white;">).appendTo(</span><span style="color: rgb(163, 21, 21); background: white;">'body'</span><span style="color: black; background: white;">);</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">29. 如何限制“Text-Area”域中的字符的个数</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  jQuery.fn.maxLength = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(max) {    </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.each(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {      </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">type = </span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">.tagName.toLowerCase();      </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">inputType = </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.type ? </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.type.toLowerCase() : </span><span style="line-height: 21px; color: blue; background: white;">null</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">;      </span><span style="line-height: 21px; color: blue; background: white;">if </span><span style="line-height: 21px; color: black; background: white;">(type == </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;input&quot; </span><span style="line-height: 21px; color: black; background: white;">&amp;&amp; inputType == </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;text&quot; </span><span style="line-height: 21px; color: black; background: white;">|| inputType == </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;password&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">) {</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;">        </span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">.maxLength = max;
      }      </span><span style="line-height: 21px; color: blue; background: white;">else if </span><span style="line-height: 21px; color: black; background: white;">(type == </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;textarea&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">) {        </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.onkeypress = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(e) {          </span><span style="line-height: 21px; color: blue; background: white;">var </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">ob = e || event;          </span><span style="line-height: 21px; color: blue; background: white;">var </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">keyCode = ob.keyCode;          </span><span style="line-height: 21px; color: blue; background: white;">var </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">hasSelection = document.selection
            ? document.selection.createRange().text.length &gt; 0
            : </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.selectionStart != </span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">.selectionEnd;          </span><span style="line-height: 21px; color: blue; background: white;">return </span><span style="line-height: 21px; color: black; background: white;">!(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">.value.length &gt;= max
            &amp;&amp; (keyCode &gt; 50 || keyCode == 32 || keyCode == 0 || keyCode == 13)
            &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);
        };        </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.onkeyup = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {          </span><span style="line-height: 21px; color: blue; background: white;">if </span><span style="line-height: 21px; color: black; background: white;">(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">.value.length &gt; max) {            </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.value = </span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">.value.substring(0, max);
          }
        };
      }
    });
  };</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //用法</span></span><span style="color: black; background: white;">$(</span><span style="color: rgb(163, 21, 21); background: white;">'#mytextarea'</span><span style="color: black; background: white;">).maxLength(500);</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">30. 如何为函数创建一个基本的测试</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//把测试单独放在模块中</span> 
  </span><span style="line-height: 21px; color: black; background: white;">module(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;Module B&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
  test(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;some other test&quot;</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">() {    </span></span><span style="line-height: 21px; color: green; background: white;"><span style="font-family:Consolas"><span style="font-family:微软雅黑">//指明测试内部预期有多少要运行的断言 
</span>    </span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">expect(2);    </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//一个比较断言，相当于JUnit的assertEquals</span> 
    </span><span style="line-height: 21px; color: black; background: white;">equals(</span><span style="line-height: 21px; color: blue; background: white;">true</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">false</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;failing test&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
    equals(</span><span style="line-height: 21px; color: blue; background: white;">true</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">true</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;passing test&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
  });</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">31. 如何在jQuery中克隆一个元素</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> var</span><span style="color: black; background: white;">cloned = $(</span><span style="color: rgb(163, 21, 21); background: white;">'#somediv'</span><span style="color: black; background: white;">).clone();</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">32. 在jQuery中如何测试某个元素是否可见</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> if</span><span style="color: black; background: white;">($(element).is(</span><span style="color: rgb(163, 21, 21); background: white;">':visible'</span><span style="color: black; background: white;">)</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">) {<br></span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//该元素是可见的</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"></span><span style="color: black; background: white;">}</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">33. 如何把一个元素放在屏幕的中心位置</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></p>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  jQuery.fn.center = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {    </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.css(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'position'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'absolute'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);    </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.css(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'top'</span><span style="line-height: 21px; color: black; background: white;">, ($(window).height() - </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.height()) <br>            / +$(window).scrollTop() + </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'px'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);    </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.css(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'left'</span><span style="line-height: 21px; color: black; background: white;">, ($(window).width() - </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.width()) <br>             / 2 + $(window).scrollLeft() + </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'px'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);    </span><span style="line-height: 21px; color: blue; background: white;">return this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">;
  }</span></span><br></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //这样来使用上面的函数：</span></span><span style="color: black; background: white;">$(element).center();</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">34. 如何把有着某个特定名称的所有元素的值都放到一个数组中</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> var</span><span style="color: black; background: white;">arrInputValues =</span><span style="color: blue; background: white;">new</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">Array();</span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;input[name='table[]']&quot;</span><span style="color: black; background: white;">).each(</span><span style="color: blue; background: white;">function</span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;">() {</span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> arrInputValues.push($(</span><span style="color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">).val());<br> });</span></span></p>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">35. 如何从元素中除去HTML</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></p>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  (</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">($) {
    $.fn.stripHtml = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {      </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">regexp = </span><span style="line-height: 21px; color: maroon; background: white;">/&lt;(&quot;[^&quot;]*&quot;|'[^']*'|[^'&quot;&gt;])*&gt;/gi</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">;      </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.each(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
        $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).html($(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).html().replace(regexp, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">));
      });      </span><span style="line-height: 21px; color: blue; background: white;">return </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
    }
  })(jQuery);</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //用法：</span></span><span style="color: black; background: white;">$(</span><span style="color: rgb(163, 21, 21); background: white;">'p'</span><span style="color: black; background: white;">).stripHtml();</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">36. 如何使用closest来取得父元素</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: black; background: white;"> $(</span><span style="color: rgb(163, 21, 21); background: white;">'#searchBox'</span><span style="color: black; background: white;">).closest(</span><span style="color: rgb(163, 21, 21); background: white;">'div'</span><span style="color: black; background: white;">);</span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">37. 如何使用Firebug和Firefox来记录jQuery事件日志</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:微软雅黑"><span style="line-height: 21px; color: black; background: white;">    </span></span><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">// 允许链式日志记录 
    // 用法：</span><span style="font-family:Consolas"> 
  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#someDiv'</span><span style="line-height: 21px; color: black; background: white;">).hide().log(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'div hidden'</span><span style="line-height: 21px; color: black; background: white;">).addClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'someClass'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
  jQuery.log = jQuery.fn.log = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(msg) {    </span><span style="line-height: 21px; color: blue; background: white;">if </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(console) {
      console.log(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;%s: %o&quot;</span><span style="line-height: 21px; color: black; background: white;">, msg, </span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
    }    </span><span style="line-height: 21px; color: blue; background: white;">return this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">;
  };</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">38. 如何强制在弹出窗口中打开链接</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  jQuery(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'a.popup'</span><span style="line-height: 21px; color: black; background: white;">).live(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'click'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    newwindow = window.open($(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).attr(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'href'</span><span style="line-height: 21px; color: black; background: white;">), </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">''</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'height=200,width=150'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);    </span><span style="line-height: 21px; color: blue; background: white;">if </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(window.focus) {
      newwindow.focus();
    } </span><span style="line-height: 21px; color: blue; background: white;">return false</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">;
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">39. 如何强制在新的选项卡中打开链接</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  jQuery(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'a.newTab'</span><span style="line-height: 21px; color: black; background: white;">).live(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'click'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    newwindow = window.open($(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">).href);
    jQuery(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).target = </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;_blank&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">;    </span><span style="line-height: 21px; color: blue; background: white;">return false</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">;
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">40. 在jQuery中如何使用.siblings()来选择同辈元素</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> // 不这样做</span></span></span></p>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></p>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#nav li'</span><span style="line-height: 21px; color: black; background: white;">).click(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#nav li'</span><span style="line-height: 21px; color: black; background: white;">).removeClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'active'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);
    $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).addClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'active'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
  });</span></span><br></pre>
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;"> //替代做法是</span></span></span></p>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#nav li'</span><span style="line-height: 21px; color: black; background: white;">).click(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).addClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'active'</span><span style="line-height: 21px; color: black; background: white;">).siblings().removeClass(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'active'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">41. 如何切换页面上的所有复选框</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   
   <p style="margin: 10px auto; display: inline; padding-bottom: 10px;"><span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"> var</span><span style="color: black; background: white;">tog =</span><span style="color: blue; background: white;">false</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;">;<br></span></span><span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">// 或者为true，如果它们在加载时为被选中状态的话</span></span></span></p>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'a'</span><span style="line-height: 21px; color: black; background: white;">).click(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;input[type=checkbox]&quot;</span><span style="line-height: 21px; color: black; background: white;">).attr(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;checked&quot;</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">, !tog);
    tog = !tog;
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">42. 如何基于一些输入文本来过滤一个元素列表</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: green; background: white;"><span style="font-family: 微软雅黑;">    //如果元素的值和输入的文本相匹配的话 
    //该元素将被返回</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'.someClass'</span><span style="line-height: 21px; color: black; background: white;">).filter(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {    </span><span style="line-height: 21px; color: blue; background: white;">return </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).attr(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'value'</span><span style="line-height: 21px; color: black; background: white;">) == $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'input#someId'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">).val();
  })</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">43. 如何获得鼠标垫光标位置x和y</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(document).ready(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    $(document).mousemove(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">(e) {
      $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#XY'</span><span style="line-height: 21px; color: black; background: white;">).html(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;X Axis : &quot; </span><span style="line-height: 21px; color: black; background: white;">+ e.pageX + </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot; | Y Axis &quot; </span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">+ e.pageY);
    });
  });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">44. 如何把整个的列表元素（List Element，LI）变成可点击的<span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;"><span style="color: black; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;"></span></span></span></p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;ul li&quot;</span><span style="line-height: 21px; color: black; background: white;">).click(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    window.location = $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).find(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;a&quot;</span><span style="line-height: 21px; color: black; background: white;">).attr(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;href&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">);    </span><span style="line-height: 21px; color: blue; background: white;">return false</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">;
  });</span></span></pre>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">&lt;</span><span style="line-height: 21px; color: maroon; background: white;">ul</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">a </span><span style="line-height: 21px; color: red; background: white;">href</span><span style="line-height: 21px; color: blue; background: white;">=&quot;#&quot;&gt;</span><span style="line-height: 21px; color: black; background: white;">Link 1</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">a</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">a </span><span style="line-height: 21px; color: red; background: white;">href</span><span style="line-height: 21px; color: blue; background: white;">=&quot;#&quot;&gt;</span><span style="line-height: 21px; color: black; background: white;">Link 2</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">a</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">a </span><span style="line-height: 21px; color: red; background: white;">href</span><span style="line-height: 21px; color: blue; background: white;">=&quot;#&quot;&gt;</span><span style="line-height: 21px; color: black; background: white;">Link 3</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">a</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
    &lt;</span><span style="line-height: 21px; color: maroon; background: white;">li</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;</span><span style="line-height: 21px; color: maroon; background: white;">a </span><span style="line-height: 21px; color: red; background: white;">href</span><span style="line-height: 21px; color: blue; background: white;">=&quot;#&quot;&gt;</span><span style="line-height: 21px; color: black; background: white;">Link 4</span><span style="line-height: 21px; color: blue; background: white;">&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">a</span><span style="line-height: 21px; color: blue; background: white;">&gt;&lt;/</span><span style="line-height: 21px; color: maroon; background: white;">li</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: blue; background: white;">&gt;
  &lt;/</span><span style="line-height: 21px; color: maroon; background: white;">ul</span><span style="line-height: 21px; color: blue; background: white;">&gt;</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"></span></span>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">45. 如何使用jQuery来解析XML（基本的例子）</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: blue; background: white;"><pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="color: black; background: white;">  </span><span style="background: white;">function </span></span><span style="color: black; background: white;"><span style="font-family:Consolas">parseXml(xml) {    </span></span><span style="font-family:Consolas"><span style="color: green; background: white;"><span style="font-family:微软雅黑">//找到每个Tutorial并打印出author</span> 
    </span><span style="color: black; background: white;">$(xml).find(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;Tutorial&quot;</span><span style="color: black; background: white;">).each(</span><span style="background: white;">function </span></span><span style="font-family:Consolas"><span style="color: black; background: white;">() {
      $(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;#output&quot;</span><span style="color: black; background: white;">).append($(</span><span style="background: white;">this</span><span style="color: black; background: white;">).attr(</span><span style="color: rgb(163, 21, 21); background: white;">&quot;author&quot;</span><span style="color: black; background: white;">) + </span><span style="color: rgb(163, 21, 21); background: white;">&quot;&quot;</span></span><span style="color: black; background: white;"><span style="font-family:Consolas">);
    });
  }</span></span></pre></span></span>
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family: Consolas;"></span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">46. 如何检查图像是否已经被完全加载进来</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'#theImage'</span><span style="line-height: 21px; color: black; background: white;">).attr(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'src'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'image.jpg'</span><span style="line-height: 21px; color: black; background: white;">).load(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
    alert(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'This Image Has Been Loaded'</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
   });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">47. 如何使用jQuery来为事件指定命名空间</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//事件可以这样绑定命名空间</span>
  </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'input'</span><span style="line-height: 21px; color: black; background: white;">).bind(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'blur.validation'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">(e) {    </span></span><span style="line-height: 21px; color: green; background: white;"><span style="font-family:Consolas">// ... 
  </span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">});  </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//data方法也接受命名空间</span> 
  </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'input'</span><span style="line-height: 21px; color: black; background: white;">).data(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'validation.isValid'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: blue; background: white;">true</span><span style="line-height: 21px; color: black; background: white;">);</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">48. 如何检查cookie是否启用</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">   </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">dt = </span><span style="line-height: 21px; color: blue; background: white;">new </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">Date();
   dt.setSeconds(dt.getSeconds() + 60);
   document.cookie = </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;cookietest=1; expires=&quot; </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">+ dt.toGMTString();   </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">cookiesEnabled = document.cookie.indexOf(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">&quot;cookietest=&quot;</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">) != -1;   </span><span style="line-height: 21px; color: blue; background: white;">if </span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">(!cookiesEnabled) {    </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: green; background: white;"><span style="font-family:微软雅黑">//没有启用cookie 
</span>  </span><span style="line-height: 21px; color: black; background: white;">}</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">49. 如何让cookie过期</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  </span><span style="line-height: 21px; color: blue; background: white;">var </span><span style="line-height: 21px; color: black; background: white;">date = </span><span style="line-height: 21px; color: blue; background: white;">new </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">Date();
  date.setTime(date.getTime() + (x * 60 * 1000));
  $.cookie(</span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'example'</span><span style="line-height: 21px; color: black; background: white;">, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'foo'</span><span style="line-height: 21px; color: black; background: white;">, { expires: date });</span></span></pre>
  </blockquote>
  <p style="margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);">50. 如何使用一个可点击的链接来替换页面中任何的URL</p>
  <blockquote style=" border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239) rgb(239, 239, 239) rgb(239, 239, 239) rgb(14, 137, 99); padding-top: 0.5em; padding-right: 10px; padding-bottom: 0.5em; margin: 1.5em 10px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ;; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; background: rgb(249, 249, 249); ">
   <pre class="" style="margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;"><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">  $.fn.replaceUrl = </span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {    </span><span style="line-height: 21px; color: blue; background: white;">var </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">regexp =      </span><span style="line-height: 21px; color: maroon; background: white;">/((ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&amp;%@!\-\/]))?)/gi</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">;    </span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">.each(</span><span style="line-height: 21px; color: blue; background: white;">function </span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">() {
      $(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">).html(
        $(</span><span style="line-height: 21px; color: blue; background: white;">this</span><span style="line-height: 21px; color: black; background: white;">).html().replace(regexp, </span><span style="line-height: 21px; color: rgb(163, 21, 21); background: white;">'&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;'</span></span><span style="font-family:Consolas"><span style="line-height: 21px; color: black; background: white;">)
      );
    });    </span><span style="line-height: 21px; color: blue; background: white;">return </span><span style="line-height: 21px; color: black; background: white;">$(</span><span style="line-height: 21px; color: blue; background: white;">this</span></span><span style="line-height: 21px; color: black; background: white;"><span style="font-family:Consolas">);
  }</span></span></pre>
   <span style="line-height: 21px; font-family: Consolas;"><span style="color: green; background: white;"><span style="font-family: 微软雅黑;">//用法　</span></span><span style="color: black; background: white;">$(</span><span style="color: rgb(163, 21, 21); background: white;">'p'</span><span style="color: black; background: white;">).replaceUrl();</span></span>
  </blockquote>
  <p><br></p>]]></content>
    
    <summary type="html">
    
        &lt;p style=&quot;margin: 10px auto; padding-bottom: 10px; font-family: georgia, 微软雅黑; font-size: 14px; line-height: 28px; white-space: normal; ba
    
    </summary>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
</feed>
