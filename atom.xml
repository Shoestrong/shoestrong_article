<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shoestrong&#39;s blog</title>
  
  <link href="/note/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-15T15:55:58.050Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shoestrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node.js建立个简单的web服务器</title>
    <link href="http://yoursite.com/20161115/node.js%E5%BB%BA%E7%AB%8B%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/20161115/node.js建立个简单的web服务器/</id>
    <published>2016-11-15T02:09:52.000Z</published>
    <updated>2016-11-15T15:55:58.050Z</updated>
    
    <content type="html"><![CDATA[<p>接触nodejs还不算太多，欠缺的知识方面很多。</p>
<p>就来试着搭建一下，废话少说直接上代码：</p>
<p>cmd:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ./myServer  &lt;自己的文件目录&gt;</div><div class="line"></div><div class="line">node server.js  &lt;直接node下运行server.js&gt;</div></pre></td></tr></table></figure>
<p>server.js:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是一个简单的Node HTTP服务器,能处理当前目录的文件</span></div><div class="line"><span class="comment">// 并能实现两种特殊的URL用于测试</span></div><div class="line"><span class="comment">// 用HTTP://localhost:4000或http://127.0.0.1:4000连接这个服务器</span></div><div class="line"></div><div class="line"><span class="comment">// 首先加载所有需要用到的模块</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);        <span class="comment">// Http服务器API</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);            <span class="comment">// 用于处理本地文件</span></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> http.Server();    <span class="comment">// 创建新的HTTP服务器</span></div><div class="line">server.listen(<span class="number">4000</span>);            <span class="comment">// 监听端口4000</span></div><div class="line"></div><div class="line"><span class="comment">// 使用on方法注册时间处理</span></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123; <span class="comment">// 当有request请求的时候触发处理函数</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Request'</span>);</div><div class="line">    <span class="comment">// 解析请求的URL</span></div><div class="line">    <span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>).parse(request.url);</div><div class="line">    <span class="comment">// 特殊URL会让服务器在发送响应前先等待</span></div><div class="line">    <span class="keyword">switch</span>(url.pathname) &#123;    </div><div class="line">    <span class="keyword">case</span> <span class="string">''</span>||<span class="string">'/'</span> : <span class="comment">// 模拟欢迎页,nodejs是高效流处理的方案,也可以通过配置文件来配置</span></div><div class="line">        fs.readFile(<span class="string">'./index.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, content</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(err) &#123;</div><div class="line">                response.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset="UTF-8"'</span> &#125;);</div><div class="line">                response.write(err.message);</div><div class="line">                response.end();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span> : <span class="string">'text/html; charset=UTF-8'</span> &#125;);</div><div class="line">                response.write(content);</div><div class="line">                response.end();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/test/delay'</span>:<span class="comment">// 此处用于模拟缓慢的网络连接</span></div><div class="line">        <span class="comment">// 使用查询字符串来获取延迟时长,或者2000毫秒</span></div><div class="line">        <span class="keyword">var</span> delay = <span class="built_in">parseInt</span>(url.query) || <span class="number">2000</span>;</div><div class="line">        <span class="comment">// 设置响应状态和头</span></div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain; charset=UTF-8'</span>&#125;);</div><div class="line">        <span class="comment">// 立即开始编写响应主体</span></div><div class="line">        response.write(<span class="string">'Sleeping for'</span> + delay + <span class="string">' milliseconds...'</span>);</div><div class="line">        <span class="comment">// 在之后调用的另一个函数中完成响应</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            response.write(<span class="string">'done.'</span>);</div><div class="line">            response.end();</div><div class="line">        &#125;, delay);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/test/mirror'</span>:<span class="comment">// 如果请求是test/mirror,则原文返回它</span></div><div class="line">        <span class="comment">// 响应状态和头</span></div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain; charset=UTF-8'</span>&#125;);</div><div class="line">        <span class="comment">// 用请求的内容开始编写响应主体</span></div><div class="line">        response.write(request.mothod + <span class="string">' '</span> + request.url + <span class="string">' HTTP/'</span> + request.httpVersion + <span class="string">'\r\n'</span>);</div><div class="line">        <span class="comment">// 所有的请求头</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> h <span class="keyword">in</span> request.headers) &#123;</div><div class="line">            response.write(h + <span class="string">':'</span> + request.headers[h] + <span class="string">'\r\n'</span>);</div><div class="line">        &#125;</div><div class="line">        response.write(<span class="string">'\r\n'</span>);<span class="comment">// 使用额外的空白行来结束头</span></div><div class="line">        <span class="comment">// 在这些事件处理程序函数中完成响应</span></div><div class="line">        <span class="comment">// 当请求主体的数据块完成时,把其写入响应中</span></div><div class="line">        request.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123; response.write(chunk); &#125;);</div><div class="line">        <span class="comment">// 当请求结束时,响应也完成</span></div><div class="line">        request.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123; response.end(); &#125;);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/json'</span> : <span class="comment">// 模拟JSON数据返回</span></div><div class="line">        <span class="comment">// 响应状态和头</span></div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span>:<span class="string">'application/json; charset=UTF-8'</span>&#125;);</div><div class="line">        response.write(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">test</span>:<span class="string">'success'</span>&#125;));</div><div class="line">        response.end();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:<span class="comment">// 处理来自本地目录的文件</span></div><div class="line">        <span class="keyword">var</span> filename = url.pathname.substring(<span class="number">1</span>);    <span class="comment">// 去掉前导'/'</span></div><div class="line">        <span class="keyword">var</span> type = getType(filename.substring(filename.lastIndexOf(<span class="string">'.'</span>)+<span class="number">1</span>));</div><div class="line">        <span class="comment">// 异步读取文件,并将内容作为单独的数据模块传给回调函数</span></div><div class="line">        <span class="comment">// 对于确实很大的文件,使用流API fs.createReadStream()更好</span></div><div class="line">        fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, content</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(err) &#123;</div><div class="line">                response.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset="UTF-8"'</span> &#125;);</div><div class="line">                response.write(err.message);</div><div class="line">                response.end();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span> : type &#125;);</div><div class="line">                response.write(content);</div><div class="line">                response.end();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125; </div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">endTag</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> type=<span class="literal">null</span>;</div><div class="line">    <span class="keyword">switch</span>(endTag)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'html'</span> :</div><div class="line">    <span class="keyword">case</span> <span class="string">'htm'</span> :</div><div class="line">        type = <span class="string">'text/html; charset=UTF-8'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'js'</span> : </div><div class="line">        type = <span class="string">'application/javascript; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'css'</span> :</div><div class="line">        type = <span class="string">'text/css; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'txt'</span> :</div><div class="line">        type = <span class="string">'text/plain; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'manifest'</span> :</div><div class="line">        type = <span class="string">'text/cache-manifest; charset="UTF-8"'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span> :</div><div class="line">        type = <span class="string">'application/octet-stream'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"><span class="comment">//向控制台输出服务启动的信息 </span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'[WebServer][Start] running at http://localhost:4000'</span>);</div></pre></td></tr></table></figure>
<p>在localhost:4000预览就OK了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触nodejs还不算太多，欠缺的知识方面很多。&lt;/p&gt;
&lt;p&gt;就来试着搭建一下，废话少说直接上代码：&lt;/p&gt;
&lt;p&gt;cmd:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>搞定git分支</title>
    <link href="http://yoursite.com/20161110/%E6%90%9E%E5%AE%9Agit%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/20161110/搞定git分支/</id>
    <published>2016-11-10T02:09:52.000Z</published>
    <updated>2016-11-15T04:03:36.484Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>查看远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git branch -a </div><div class="line">* br-2.1.2.2  </div><div class="line">master  </div><div class="line">remotes/origin/HEAD -&gt; origin/master  </div><div class="line">remotes/origin/br-2.1.2.1  </div><div class="line">remotes/origin/br-2.1.2.2  </div><div class="line">remotes/origin/br-2.1.3  </div><div class="line">remotes/origin/master</div></pre></td></tr></table></figure>
</li>
<li><p>查看本地分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch -a  </div><div class="line">* br-2.1.2.2  </div><div class="line">master</div></pre></td></tr></table></figure>
</li>
<li><p>创建分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git branch test </div><div class="line">$ git branch  </div><div class="line">* br-2.1.2.2  </div><div class="line">master  </div><div class="line">test</div></pre></td></tr></table></figure>
<p>把分支推到远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin test</div></pre></td></tr></table></figure>
</li>
<li><p>切换分支到test</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git branch  </div><div class="line">* br-2.1.2.2  </div><div class="line">master  </div><div class="line">test  </div><div class="line"></div><div class="line">$ git checkout test  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/service/cmd/GetCustomerTarCmd.java  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/util/ServerUtil.java  </div><div class="line">Switched to branch &apos;test&apos;  </div><div class="line"></div><div class="line">$ git branch  </div><div class="line">br-2.1.2.2  </div><div class="line">master  </div><div class="line">* test</div></pre></td></tr></table></figure>
<p>M 表示cong 原来分支（上一次修改没有提交br-2.1.2.2）带过来的修改</p>
</li>
<li><p>删除本地分支 git branch -d xxxxx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ git checkout br-2.1.2.2  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/service/cmd/GetCustomerTarCmd.java  </div><div class="line">M Shoestrong-server/src/main/java/com/taobao/Shoestrong/server/util/ServerUtil.java  </div><div class="line">Switched to branch &apos;br-2.1.2.2&apos;  </div><div class="line"></div><div class="line">$ git br  </div><div class="line">* br-2.1.2.2  </div><div class="line"> master  </div><div class="line"> test  </div><div class="line"></div><div class="line">$ git br -d test  </div><div class="line">Deleted branch test (was 17d28d9).  </div><div class="line"></div><div class="line">$ git br  </div><div class="line">* br-2.1.2.2  </div><div class="line"> master</div></pre></td></tr></table></figure>
</li>
<li><p>查看本地和远程分支 -a。前面带*号的代表你当前工作目录所处的分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remotes/origin/HEAD -&gt; origin/master #啥意思呢？</div></pre></td></tr></table></figure>
<p>”在clone完成之后，Git 会自动为你将此远程仓库命名为origin（origin只相当于一个别名，运行git remote –v或者查看.git\/config可以看到origin的含义），并下载其中所有的数据，建立一个指向它的master 分支的指针，我们用(远程仓库名)\/(分支名) 这样的形式表示远程分支，所以origin\/master指向的是一个remote branch（从那个branch我们clone数据到本地）“<br>这个是执行 git remote -v 的结果，看出来origin其实就是远程的git地址的一个别名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote  -v  </div><div class="line">origin  git@xxxx/Shoestrong.git (fetch)  </div><div class="line">origin  git@xxxx/Shoestrong.git (push)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git branch -a  </div><div class="line">br-2.1.2.2  </div><div class="line">master  </div><div class="line">* test  </div><div class="line">remotes/origin/HEAD -&gt; origin/master  </div><div class="line">remotes/origin/br-2.1.2.1  </div><div class="line">remotes/origin/br-2.1.2.2  </div><div class="line">remotes/origin/br-2.1.3  </div><div class="line">remotes/origin/master</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :br-1.0.0</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -r -d origin/branch-name  </div><div class="line">git push origin :branch-name</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看远程分支&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sublime 编辑器配置和构建检查</title>
    <link href="http://yoursite.com/20160912/sublime%20%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E6%9E%84%E5%BB%BA%E6%A3%80%E6%9F%A5/"/>
    <id>http://yoursite.com/20160912/sublime 编辑器配置和构建检查/</id>
    <published>2016-09-12T08:50:00.000Z</published>
    <updated>2016-11-15T17:00:02.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sublime安装配置"><a href="#sublime安装配置" class="headerlink" title="sublime安装配置"></a>sublime安装配置</h2><h3 id="安装node包"><a href="#安装node包" class="headerlink" title="安装node包"></a>安装node包</h3><ul>
<li>jscs <code>npm install jscs -g</code></li>
<li>jshint <code>npm install jshint -g</code></li>
<li>csscomb <code>npm install csscomb -g</code></li>
<li>csslint <code>npm install csslint -g</code></li>
</ul>
<h3 id="安装gem包"><a href="#安装gem包" class="headerlink" title="安装gem包"></a>安装gem包</h3><ul>
<li>scss-lint <code>gem install scss_lint</code></li>
</ul>
<h3 id="安装sublime3-Package-Control"><a href="#安装sublime3-Package-Control" class="headerlink" title="安装sublime3 Package Control"></a>安装sublime3 <a href="https://packagecontrol.io/installation#st3" target="_blank" rel="external">Package Control</a></h3><ul>
<li>按下 `ctrl+``</li>
<li>复制粘贴以下代码 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`import urllib.request,os,hashlib; h = &apos;eb2297e1a458f27d836c04bb0cbaf282&apos; + &apos;d0e7a3098092775ccb37ca9d6b2e4b7d&apos;; </div><div class="line">    pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest();print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)`</div></pre></td></tr></table></figure>
<h3 id="安装sublime3插件"><a href="#安装sublime3插件" class="headerlink" title="安装sublime3插件"></a>安装sublime3插件</h3><ul>
<li>按下 <code>ctrl+shift+p</code>，输入’ip’（Install Package）</li>
<li><p>输入以下插件的名字，按顺序逐个进行安装：</p>
<ul>
<li><code>EditorConfig</code></li>
<li><code>Sass</code></li>
<li><code>SublimeLinter</code></li>
<li><code>SublimeLinter-jscs</code></li>
<li><code>SublimeLinter-jshint</code></li>
<li><code>SublimeLinter-csslint</code></li>
<li><code>SublimeLinter-contrib-scss-lint</code></li>
<li><code>JSFormat</code></li>
<li><code>CSScomb</code></li>
</ul>
</li>
</ul>
<h3 id="插件的配置文件"><a href="#插件的配置文件" class="headerlink" title="插件的配置文件"></a>插件的配置文件</h3><p>将以下配置文件分别下载后放入项目根目录下：</p>
<ul>
<li><code>EditorConfig</code><a href="http://alloyteam.github.io/CodeGuide/.editorconfig" target="_blank" rel="external">配置文件</a></li>
<li><code>JSCS</code><a href="http://alloyteam.github.io/CodeGuide/.jscsrc" target="_blank" rel="external">配置文件</a></li>
<li><code>JSHint</code><a href="http://alloyteam.github.io/CodeGuide/.jshintrc" target="_blank" rel="external">配置文件</a></li>
</ul>
<p>注意：全局变量需要手动加到配置文件的globals属性里，例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;globals&quot;: &#123;</div><div class="line">        &quot;ImageHandle&quot;: true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>CSSLint</code><a href="http://alloyteam.github.io/CodeGuide/.csslintrc" target="_blank" rel="external">配置文件</a></li>
<li><code>SCSS-Lint</code><a href="http://alloyteam.github.io/CodeGuide/.scss-lint.yml" target="_blank" rel="external">配置文件</a></li>
</ul>
<h3 id="编辑器及插件设置"><a href="#编辑器及插件设置" class="headerlink" title="编辑器及插件设置"></a>编辑器及插件设置</h3><ul>
<li><code>sublime3</code> 自身</li>
</ul>
<p>Preferences-&gt;Setting-User，增加下面两个配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;translate_tabs_to_spaces&quot;: true,</div><div class="line">    &quot;word_wrap&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击右下角的Spaces-&gt;Convert Indentation to Spaces可以将文件中的所有tab转换成空格</p>
<ul>
<li><p><code>JSFormat</code></p>
<p>Preferences-&gt;Package Settings-&gt;JSFormat-&gt;Setting-User，下载<a href="http://alloyteam.github.io/CodeGuide/jsformat_setting_user.json" target="_blank" rel="external">配置文件</a>覆盖</p>
<p>配置好后格式化的默认快捷键是 <code>ctrl+alt+f</code></p>
</li>
<li><p><code>SublimeLinter</code></p>
<p>右键-&gt;SublimeLinter-&gt;Lint Mode，有4种检查模式，建议选择 <code>Load/save</code></p>
<p>右键-&gt;SublimeLinter-&gt;Mark Style，建议选择 <code>Outline</code></p>
<p>右键-&gt;SublimeLinter-&gt;Choose Gutter Theme，建议选择 <code>Blueberry-round</code></p>
<p>右键-&gt;SublimeLinter-&gt;Open User Settings，将linter里面jscs的args改成 <code>[&quot;--verbose&quot;]</code>，将linter里面csslint的ignore改成 <code>&quot;box-model,adjoining-classes,box-sizing,compatible-vendor-prefixes,gradients,text-indent,fallback-colors,star-property-hack,underscore-property-hack,bulletproof-font-face,font-faces,import,regex-selectors,universal-selector,unqualified-attributes,overqualified-elements,duplicate-background-images,floats,font-sizes,ids,important,outline-none,qualified-headings,unique-headings&quot;</code></p>
<p>当光标处于有错误的代码行时，详细的错误信息会显示在下面的状态栏中</p>
<p>右键-&gt;SublimeLinter可以看到所有的快捷键，其中 <code>ctrl+k, a</code> 可以列出所有错误</p>
</li>
<li><p><code>CSScomb</code></p>
<p>Preferences-&gt;Package Settings-&gt;CSScomb-&gt;Setting-User，下载<a href="http://alloyteam.github.io/CodeGuide/csscomb_setting_user.json" target="_blank" rel="external">配置文件</a>覆盖</p>
<p>配置好后格式化的默认快捷键是 <code>ctrl+shift+c</code></p>
</li>
</ul>
<h2 id="grunt插件"><a href="#grunt插件" class="headerlink" title="grunt插件"></a>grunt插件</h2><h3 id="在项目中安装grunt插件"><a href="#在项目中安装grunt插件" class="headerlink" title="在项目中安装grunt插件"></a>在项目中安装grunt插件</h3><p><em>jscs <code>npm install grunt-jscs --save-dev</code>
</em>jshint <code>npm install grunt-contrib-jshint --save-dev</code><br><em>csslint <code>npm install grunt-contrib-csslint --save-dev</code>
</em>scss-lint <code>npm install grunt-scss-lint --save-dev</code></p>
<h3 id="插件的配置文件-1"><a href="#插件的配置文件-1" class="headerlink" title="插件的配置文件"></a>插件的配置文件</h3><ul>
<li><code>JSCS</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        config: true,</div><div class="line">        verbose: true</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>JSHint</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        jshintrc: true</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>CSSLint</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        csslintrc: &apos;.csslintrc&apos;</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>SCSS-Lint</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    options: &#123;</div><div class="line">        config: &apos;.scss-lint.yml&apos;</div><div class="line">    &#125;,</div><div class="line">    files: &#123;</div><div class="line">        src: [...]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sublime安装配置&quot;&gt;&lt;a href=&quot;#sublime安装配置&quot; class=&quot;headerlink&quot; title=&quot;sublime安装配置&quot;&gt;&lt;/a&gt;sublime安装配置&lt;/h2&gt;&lt;h3 id=&quot;安装node包&quot;&gt;&lt;a href=&quot;#安装node包&quot; c
    
    </summary>
    
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
</feed>
